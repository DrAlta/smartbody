- How to generate sdk folder
Open terminal and direct to current folder, run the following command
./createOSXSDK.sh 
This will generate a sdk folder.

- What's inside sdk folder that's interesting to end user
"bin" folder contains ready-to-use execuables.
startSimpleSmartBody.command will launch a simple SmartBody test program.
startSBGUI.command will launch standard SmartBody program.

If you want to build on your own instead of using executables out of box. You need to install cmake (Note that cmake 2.8.4 and 2.8.5 will give an error, maybe more versions will also give errors, this is not fully tested), so use latest cmake version 2.8.10+.

Once you have cmake ready. Run
./buildCMake.sh if you just want to run a standard cmake build process.
./buildXcode.sh if you want to generate a xcode project and run from that.

If you decide to go for xcode project, here's some known issues:
Xcode project generated by cmake doesn't have the right build products path. So if you see the symbols are red under Products Filter, ignore that. All built products can be found at ./buildXcode/src/Debug or ./buildXcode/src/Release
When you run the build from xcode project, if python module loading throws the exception, you can copy "Python" from /System/Library/Frameworks/Python.frameworks/Python to ./buildXcode/src/Debug or ./buildXcode/src/Release

- Known issues and todo
Example demos will crash if it's using Sinbad character (need to examine the reason)
DYLD_LIBRARY has to be specified for Python module (maybe this can be resolved by finding python module from CMakeLists.txt)
Reason of not distributing xcode project is because xcode generated by cmake has absolute path (will distribute it if absolute path is generated)
Right now all the 3rd party libraries are included in SmartBody distribution. Maybe in the future there's a way to get 3rd party library from /usr/local/include assume the machine already have SmartBody mac osx version.
