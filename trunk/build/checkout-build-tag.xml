<?xml version="1.0" encoding="UTF-8"?>
<project name="sbmbuild" default="all" basedir=".">

    <!-- set ANT_OPTS=-Xms512m -Xmx1g -->
    <!-- need ant-contrib-1.0b3.jar in c:\apache-ant-1.8.1\lib dir -->
    <!-- need antcount.jar in c:\apache-ant-1.8.1\lib dir -->

    <!-- ant -Dsvn.password=blah  -->


    <!-- this script performs the following tasks:
         - check to see if a previous build is running, and quits if so
         - create a timestamp file to indicate when this build has run
         - pull sbm from svn
         - compiles sbm
         - moves the build to final destination
         - gather directory statistics
         - filter revision numbers from svn output
         - filter errors and warnings from compiler output
         - generate email report
         - tag repository with email report
         - generate build output
    -->


    <typedef resource="net/sf/antcontrib/antlib.xml"/>
    <typedef resource="net/sf/antcount/antlib.xml"/>


    <property name="build.suffix" value=""/>
    <property name="tag.svn" value="no"/>
    <property name="email.report" value="yes"/>
    <property name="email.host" value="localhost"/>
    <property name="email.from" value="blah@example.com"/>
    <property name="email.to" value="blah@example.com"/>
    <property name="destination.folder" value="D:\SBM-Builds"/>


    <target name="all" depends="clean,build" description="Full build"></target>

    <target name="clean">
        <delete dir="./sbm"/>
    </target>


    <target name="build">

        <stopwatch name="total.build.time"/>

        <!-- check to see if the build is running and quit out if it is -->
        <available file="BUILD_RUNNING" property="build.running"/>
        <fail if="build.running" message="Build is already running!"/>


        <!-- create the build running file, and update the timestamp file -->
        <touch file="BUILD_RUNNING"/>
        <tstamp><format property="build.time.file" pattern="yyyy-MM-dd HH:mm:ss"/></tstamp>
        <echo file="BUILD_TIME" message="${build.time.file}"/>


        <stopwatch name="saso.svn.time"/>

        <!-- pull SBM from svn --> 
        <echo message="--- Starting saso.svn..."/>
        <exec executable="svn.exe" outputproperty="saso.svn.output">
            <arg line="export https://smartbody.svn.sourceforge.net/svnroot/smartbody/trunk smartbody"/>
        </exec>

        <stopwatch name="saso.svn.time" action="total"/>


        <!-- compile SBM -->
        <echo message="--- Starting saso.compile..."/>
        <stopwatch name="saso.compile.time"/>
        <exec executable="cmd.exe" dir="smartbody" outputproperty="saso.compile.output">
            <arg line="/c compile-sbm.bat"/>
        </exec>
        <stopwatch name="saso.compile.time" action="total"/>


        <!-- filter out revision numbers from svn output -->

        <echo message="--- Analyzing output..."/>

        <loadresource property="saso.svn.revisions">
            <propertyresource name="saso.svn.output"/>
            <filterchain>
                <linecontainsregexp>
                    <regexp pattern="(Exported revision |Fetching external item into |Exported external at )"/>
                </linecontainsregexp>
                <prefixlines prefix="   "/>
                <countfilter property="saso.svn.revisions.count"/>
            </filterchain>
        </loadresource>

        <!-- assume the last line is the actual revision of the export -->
        <loadresource property="saso.svn.revision.rev1">
            <propertyresource name="saso.svn.revisions"/>
            <filterchain>
               <tailfilter lines="1"/>
            </filterchain>
        </loadresource>

        <propertyregex property="saso.svn.revision" input="${saso.svn.revision.rev1}" regexp="(.*)Exported revision (\d+)(.*)" select="\2" />
        <echo message="saso revision: ${saso.svn.revision}"/>


        <!-- filter out compiler errors and warnings -->

        <!-- (C++)  2>vhcl - 0 error(s), 0 warning(s)         -->
        <!-- (C#)   Compile complete -<>- 2 errors, 0 warnings  -->

        <loadresource property="saso.compile.result">
            <propertyresource name="saso.compile.output"/>
            <filterchain>
                <linecontainsregexp>
                    <regexp pattern="(.*)- (\d+)(\s?)error(.*)(\d+)(\s?)warning(.*)"/>
                </linecontainsregexp>
                <prefixlines prefix="   "/>
            </filterchain>
        </loadresource>

        <loadresource property="saso.compile.errors">
            <propertyresource name="saso.compile.result"/>
            <filterchain>
                <countfilter property="saso.compile.errors.count" match="(.*)- ([1-9]+[0-9]*)(\s?)error(.*?)(\d+)(\s?)warning(.*)">
                    <sum property="saso.compile.errors.sum" select="\2"/>
                </countfilter>
                <linecontainsregexp>
                    <regexp pattern="(.*)- ([1-9]+[0-9]*)(\s?)error(.*)(\d+)(\s?)warning(.*)"/>
                </linecontainsregexp>
            </filterchain>
        </loadresource>

        <loadresource property="saso.compile.warnings">
            <propertyresource name="saso.compile.result"/>
            <filterchain>
                <countfilter property="saso.compile.warnings.count" match="(.*)- (\d+)(\s?)error(.*?)([1-9]+[0-9]*)(\s?)warning(.*)">
                    <sum property="saso.compile.warnings.sum" select="\5"/>
                </countfilter>
                <linecontainsregexp>
                    <regexp pattern="(.*)- (\d+)(\s?)error(.*)([1-9]+[0-9]*)(\s?)warning(.*)"/>
                </linecontainsregexp>
            </filterchain>
        </loadresource>


        <!-- determine if build succeeded by looking for compiler errors -->
        <if>
            <not><isset property="saso.compile.errors"/></not>
            <then>
                <property name="build.success" value="1"/>
                <echo message="Build Success."/>
            </then>
        </if>


        <buildnumber/>
        <echo message="build: ${build.number}"/>

        <tstamp><format property="build.date" pattern="MM-dd-yyyy"/></tstamp>
        <echo message="date: ${build.date}"/>

        <if>
            <isset property="build.success"/>
            <then>
                <property name="build.folder.name" value="Build${build.number}-${build.date}${build.suffix}"/>
            </then>
            <else>
                <property name="build.folder.name" value="Build${build.number}-${build.date}${build.suffix}-failed"/>
            </else>
        </if>
        <echo message="folder.name: ${build.folder.name}"/>

        <property name="build.folder" value="${destination.folder}\${build.folder.name}"/>
        <echo message="folder: ${build.folder}"/>


        <!-- move build to its destination folder -->
        <mkdir dir="${build.folder}"/>
        <move file="smartbody" todir="${build.folder}"/>


        <echo message="--- Starting directory statistics..."/>
        <length property="dir.size.total">
            <fileset dir="${build.folder}"/>
        </length>

        <resourcecount property="num.files.total">
            <fileset dir="${build.folder}"/>
        </resourcecount>

        <resourcecount property="num.dirs.total">
            <dirset dir="${build.folder}"/>
        </resourcecount>


        <echo message="size:  ${dir.size.total}"/>
        <echo message="files: ${num.files.total}"/>
        <echo message="dirs:  ${num.dirs.total}"/>


        <stopwatch name="total.build.time" action="total"/>


        <!-- generate output to be used in email report -->

        <property name="final.mail.file" value="${build.folder}/FinalMail.txt"/>

        <concat destfile="${final.mail.file}" append="no">build: Automatically tagging r${saso.svn.revision} as Build #${build.number}

Build Summary:
</concat>
        <if>
            <isset property="build.success"/>
            <then>
                <concat destfile="${final.mail.file}" append="yes">   Build Success.</concat>
            </then>
            <else>
                <concat destfile="${final.mail.file}" append="yes">   Build FAILED!!</concat>
            </else>
        </if>

        <concat destfile="${final.mail.file}" append="yes">

Broken projects:
</concat>
        <if><isset property="saso.compile.errors"/><then><concat destfile="${final.mail.file}" append="yes">${saso.compile.errors}</concat></then></if>
        <concat destfile="${final.mail.file}" append="yes">
Dirty projects:
</concat>
        <if><isset property="saso.compile.warnings"/><then><concat destfile="${final.mail.file}" append="yes">${saso.compile.warnings}</concat></then></if>

        <concat destfile="${final.mail.file}" append="yes">

Build ${build.number} took ${total.build.time}
   saso.svn.time ${saso.svn.time}
   saso.compile.time ${saso.compile.time}

Build size: ${dir.size.total} (${num.files.total} files, ${num.dirs.total} dirs)

Build is available at \\arcade\SBM-Builds\${build.folder.name}

Log: \\arcade\SBM-Builds\${build.folder.name}\BuildLog.txt

Revisions used:
saso revisions (based off of r${saso.svn.revision}):
${saso.svn.revisions}
</concat>

        <fixcrlf file="${final.mail.file}"/>


        <!-- tag the repositories with the email report -->

        <if>
            <istrue value="${tag.svn}"/>
            <then>
            </then>
        </if>

        <if>
            <istrue value="${email.report}"/>
            <then>
                <mail mailhost="${email.host}" from="${email.from}" tolist="${email.to}" subject="[SBM] Build Results" messagefile="${final.mail.file}"/>
            </then>
        </if>


<!--        <delete file="${final.mail.file}"/>  -->


        <!-- generate output for log file -->

        <property name="build.log.file" value="${build.folder}/BuildLog.txt"/>

        <concat destfile="${build.log.file}" force="yes" append="yes">
------------------

${saso.svn.output}

        </concat>

        <concat destfile="${build.log.file}" force="yes" append="yes">
------------------

${saso.compile.output}

        </concat>


        <delete file="BUILD_RUNNING"/>

    </target>

</project>
