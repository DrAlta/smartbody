//  export_skm.mel - part of SmartBody Project
//  Copyright (C) 2005-2008  University of Southern California
//
//  SmartBody is free software: you can redistribute it and/or
//  modify it under the terms of the Lesser GNU General Public License
//  as published by the Free Software Foundation, version 3 of the
//  license.
//
//  SmartBody is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  Lesser GNU General Public License for more details.
//
//  You should have received a copy of the Lesser GNU General Public
//  License along with SmartBody.  If not, see:
//      http://www.gnu.org/licenses/lgpl-3.0.txt
//
//  CONTRIBUTORS:
//      Marcelo Kallmann, USC (currently at UC Merced)
//      Ashok Basawapatna, USC (no longer)
//      Andrew n marshall, USC



////////////////////////////////////////////////////////////////
//  Exports animation in .skm format for SmartBody
//  Prompts for BML timing metadata
//



//=================================== UI =============================================

global proc int skmFileCb( string $filename, string $fileType )
{
   textFieldGrp -e -text $filename skmOutputFile;
   return 1;
}


/*----------------------------------------
PROC: skmUpdateOldFiles
This will update files created with older versions of the SKM exporter
----------------------------------------*/
proc skmUpdateOldFiles( string $newAnimName )
{
   //Updates to v0.7
   int $tempInt;

   if ( `objExists fpsNode` )
   {
      if ( `attributeExists framesPerSecond fpsNode` )
      {
         int $tempInt = `getAttr "fpsNode.framesPerSecond"`;
         setAttr ( "AnimDef_" + $newAnimName + ".framesPerSecond" ) $tempInt;
      }

      delete fpsNode;
      print "Old fpsNode deleted! \n";
   }

   if ( `objExists firstFrameNode` )
   {
      if ( `attributeExists framesPerSecond firstFrameNode` )
      {
         int $tempInt = `getAttr "firstFrameNode.firstFrameNumber"`;
         setAttr ( "AnimDef_" + $newAnimName + ".firstFrameNumber") $tempInt;
      }

      delete firstFrameNode;
      print "Old firstFrameNode deleted! \n";
   }

   if ( `objExists lastFrameNode` )
   {
      if ( `attributeExists lastFrameNumber lastFrameNode` )
      {
         int $tempInt = `getAttr "lastFrameNode.lastFrameNumber"`;
         setAttr ( "AnimDef_" + $newAnimName + ".lastFrameNumber" ) $tempInt;
      }

      delete lastFrameNode;
      print "Old lastFrameNode deleted! \n";
   }

   if ( `objExists readyNode` )
   {
      if ( `attributeExists readyTime readyNode` )
      {
         int $tempInt = `getAttr "readyNode.readyTime"`;
         setAttr ( "AnimDef_" + $newAnimName + ".readyTime" ) $tempInt;
      }

      delete readyNode;
      print "Old readyNode deleted! \n";
   }

   if ( `objExists strokeStartNode` )
   {
      if ( `attributeExists strokeStartTime strokeStartNode` )
      {
         int $tempInt = `getAttr "strokeStartNode.strokeStartTime"`;
         setAttr ( "AnimDef_" + $newAnimName + ".strokeStartTime" ) $tempInt;
      }

      delete strokeStartNode;
      print "Old strokeStartNode deleted! \n";
   }

   if ( `objExists emphasisNode` )
   {
      if ( `attributeExists emphasisTime emphasisNode` )
      {
         int $tempInt = `getAttr "emphasisNode.emphasisTime"`;
         setAttr ( "AnimDef_" + $newAnimName + ".emphasisTime" ) $tempInt;
      }

      delete emphasisNode;
      print "Old emphasisNode deleted! \n";
   }

   if ( `objExists strokeNode` )
   {
      if ( `attributeExists strokeTime strokeNode` )
      {
         int $tempInt = `getAttr "strokeNode.strokeTime"`;
         setAttr ( "AnimDef_" + $newAnimName + ".strokeTime" ) $tempInt;
      }

      delete strokeNode;
      print "Old strokeNode deleted! \n";
   }

   if ( `objExists relaxNode` )
   {
      if ( `attributeExists relaxTime relaxNode` )
      {
         int $tempInt = `getAttr "relaxNode.relaxTime"`;
         setAttr ( "AnimDef_" + $newAnimName + ".relaxTime" ) $tempInt;
      }

      delete relaxNode;
      print "Old relaxNode deleted! \n";
   }
}


/*----------------------------------------
GLOBAL PROC: skmAddAnimDef
----------------------------------------*/
global proc skmAddAnimDef()
{
   string $result = `promptDialog -title "Define New Animation" -message "Animation Name?"
               -button "OK" -button "Cancel"
               -defaultButton "OK" -cancelButton "Cancel"
               -dismissString "Cancel"`;

   if ( $result == "OK" )
   {
      $newAnimName = `promptDialog -query -text`;
      textScrollList -edit -append $newAnimName scrollListAnim;

      //Create node with setting attributes
      group -n ( "AnimDef_" + $newAnimName ) -em -p SmartbodyExportOptions;
      addAttr -ln "framesPerSecond" -sn "frmsps" -at "long" -min 1 -dv 30 ( "AnimDef_" + $newAnimName );
      addAttr -ln "firstFrameNumber" -sn "fFrm" -at "long" ( "AnimDef_" + $newAnimName );
      addAttr -ln "lastFrameNumber" -sn "lFrm" -at "long" ( "AnimDef_" + $newAnimName );
      addAttr -ln "readyTime" -sn "rdyTime" -at "double" ( "AnimDef_" + $newAnimName );
      addAttr -ln "strokeStartTime" -sn "sStart" -at "double" ( "AnimDef_" + $newAnimName );
      addAttr -ln "emphasisTime" -sn "seTime" -at "double" ( "AnimDef_" + $newAnimName );
      addAttr -ln "strokeTime" -sn "sEnd" -at "double" ( "AnimDef_" + $newAnimName );
      addAttr -ln "relaxTime" -sn "rlxTime" -at "double" ( "AnimDef_" + $newAnimName );

      addAttr -ln "skeletonRoot" -sn "skRoot" -dt "string" ( "AnimDef_" + $newAnimName );
      setAttr -type "string" ( "AnimDef_" + $newAnimName + ".skeletonRoot" ) "base";

      addAttr -ln "outputFile" -sn "outFile" -dt "string" ( "AnimDef_" + $newAnimName );
      setAttr -type "string" ( "AnimDef_" + $newAnimName + ".outputFile" ) ( $newAnimName + ".skm" );

      textScrollList -edit -si $newAnimName scrollListAnim;
      updateAnimUI;

      print( "New animation definition created: " + $newAnimName + "\n" );
   }
}


/*----------------------------------------
GLOBAL PROC: skmDeleteAnimDef
----------------------------------------*/
global proc skmDeleteAnimDef()
{
   $selAnim = `textScrollList -q -si scrollListAnim`;
   textScrollList -edit -ri $selAnim scrollListAnim;
   delete ( "AnimDef_" + $selAnim[ 0 ] );
   print( "Animation definition deleted: " + $selAnim[ 0 ] + "\n" );
}


/*----------------------------------------
GLOBAL PROC: skmRenameAnimDef
----------------------------------------*/
global proc skmRenameAnimDef()
{
   string $selAnim[];
   string $selAnimDef;
   string $newAnimName;

   //Get curernt animation name
   $selAnim = `textScrollList -q -si scrollListAnim` ;

   //Create "new name" prompt window
   string $PromptResult = `promptDialog -title "Rename Selected Animation" -message "New Animation Name?"
               -button "Rename" -button "Cancel"
               -defaultButton "Rename" -cancelButton "Cancel"
               -dismissString "Cancel"`;

   //Update naming
   if ( $PromptResult == "Rename" )
   {
      $newAnimName = `promptDialog -query -text`;
      textScrollList -edit -ri $selAnim[ 0 ] scrollListAnim;
      textScrollList -edit -append $newAnimName scrollListAnim;
      rename( "AnimDef_" + $selAnim[ 0 ] ) ( "AnimDef_" + $newAnimName );
      textScrollList -edit -si $newAnimName scrollListAnim;
      updateAnimUI;
   }

   //Finish
   print( "Animation definition renamed from: " + $selAnim[ 0 ] + " to " + $newAnimName + "\n" );
}


/*----------------------------------------
GLOBAL PROC: updateAnimUI
This updates the animation UI when a particular animation definition is selected
----------------------------------------*/
global proc updateAnimUI()
{
   //get animation definition name
   string $selAnim[] = `textScrollList -q -si "scrollListAnim" `;
   string $AnimDef = ( "AnimDef_" + $selAnim[ 0 ] );

   //first and last frame	
   int $firstFrame = `getAttr( $AnimDef + ".firstFrameNumber" )`;
   intSliderGrp -edit -value $firstFrame skmFirstFrameSlider;

   int $lastFrame = `getAttr( $AnimDef + ".lastFrameNumber" )`;
   intSliderGrp -edit -value $lastFrame skmLastFrameSlider;

   //Synch points
   int $readyFrame = `getAttr( $AnimDef + ".readyTime" )`;
   intSliderGrp -edit -min $firstFrame -max $lastFrame -value $readyFrame sliderReady;

   int $strokeStartFrame = `getAttr( $AnimDef + ".strokeStartTime" )`;
   intSliderGrp -edit -min $firstFrame -max $lastFrame -value $strokeStartFrame sliderStrokeStart;

   int $emphasisFrame = `getAttr( $AnimDef + ".emphasisTime" )`;
   intSliderGrp -edit -min $firstFrame -max $lastFrame -value $emphasisFrame sliderEmphasis;

   int $strokeEndFrame = `getAttr( $AnimDef + ".strokeTime" )`;
   intSliderGrp -edit -min $firstFrame -max $lastFrame -value $strokeEndFrame sliderStrokeEnd;

   int $relaxFrame = `getAttr( $AnimDef + ".relaxTime" )`;
   intSliderGrp -edit -min $firstFrame -max $lastFrame -value $relaxFrame sliderRelax;

   //Misc other info
   int $fps = `getAttr( $AnimDef  + ".framesPerSecond" )`;
   intSliderGrp -edit -value $fps sliderFps;

   string $skeletonRoot = `getAttr( $AnimDef + ".skeletonRoot" )`;
   textFieldGrp -edit -text $skeletonRoot skmRootField;

   string $outputFile = `getAttr( $AnimDef + ".outputFile" )`;
   textFieldGrp -edit -text $outputFile skmOutputFile;
}



global proc changeIsFacial()
{
	global int $isFacial;
	
	if($isFacial)
	{
		$isFacial = 0;
	}
	else
	{
		$isFacial = 1;
	}
}

/*----------------------------------------
GLOBAL PROC: skmExportWin
This creates the main UI window
----------------------------------------*/
global proc skmExportWin()
{
   global string $version = "1.0";
   
   global int $isFacial = 0;

   if ( ( `window -exists skmMainWin` ) == true )
   {
      deleteUI skmMainWin;
      windowPref -remove skmMainWin;
   }

   //BUILD UI WINDOW
   string $winTitle = "SKM Exporter v" + $version ;
   window -title $winTitle -rtf true -s true skmMainWin;
   columnLayout -adj true -cat "both" 5;
      frameLayout -borderStyle etchedIn -collapsable false -collapse 0 -label "Animation Definitions";
         columnLayout -adj true -rs 2 -co "both" 10;
            textScrollList  -numberOfRows 3 -w 250 -allowMultiSelection false
                            -showIndexedItem 4 -selectCommand updateAnimUI scrollListAnim;
            rowColumnLayout -numberOfRows 1 -rh 1 20 -rs 1 2 -cat 1 "right" 3;
               button -label "Create Animation"  -align "center" -command "skmAddAnimDef";
               button -label "Rename Animation"  -align "center" -command "skmRenameAnimDef";
               button -label "Delete Animation"  -align "center" -command "skmDeleteAnimDef";
               setParent skmMainWin;
   checkBox -editable false -label "Loaded from existing \"SmatbodyExportOptions\" node" -align "left" loadedBox;
   checkBox -editable false -changeCommand "changeIsFacial()" -value false -label "Facial Animations" -align "left" facialBox;	
   frameLayout -borderStyle etchedIn -collapsable false -collapse 0 -label "Animation Length & Synch Points";
      columnLayout -adj true;
         intSliderGrp -label "First Frame:" -adj 3 -cw 2 50 -cat 1 "right" 5 -field true -fmn -10000 -fmx 10000 -changeCommand firstFrameUpdate skmFirstFrameSlider; 
         intSliderGrp -label "Last Frame:"  -adj 3 -cw 2 50 -cat 1 "right" 5 -field true -fmn -10000 -fmx 10000 -changeCommand lastFrameUpdate skmLastFrameSlider;
         columnLayout -adj true -rs 2 -co "both" 10;
            button -label "Stroke, Ready, Relax Help" -align "center" -command infoPressed;
            setParent .. ;
         intSliderGrp -label "Ready End Frame"     -adj 3 -cw 2 50 -cat 1 "right" 5 -field true -fmn -10000 -fmx 10000 -changeCommand readyUpdate sliderReady ;
         intSliderGrp -label "Stroke Start Frame:" -adj 3 -cw 2 50 -cat 1 "right" 5 -field true -fmn -10000 -fmx 10000 -changeCommand strokeStartUpdate sliderStrokeStart ;
         intSliderGrp -label "Emphasis Frame:"     -adj 3 -cw 2 50 -cat 1 "right" 5 -field true -fmn -10000 -fmx 10000 -changeCommand emphasisUpdate sliderEmphasis ;
         intSliderGrp -label "Stroke End Frame:"   -adj 3 -cw 2 50 -cat 1 "right" 5 -field true -fmn -10000 -fmx 10000 -changeCommand strokeUpdate sliderStrokeEnd ; 
         intSliderGrp -label "Relax End Frame:"    -adj 3 -cw 2 50 -cat 1 "right" 5 -field true -fmn -10000 -fmx 10000 -changeCommand relaxUpdate sliderRelax ; 
         setParent skmMainWin;
   frameLayout -borderStyle etchedIn -collapsable false -collapse 0 -label "Export Setup";
      columnLayout -adj true;
         intSliderGrp -label "Frames per Seconds:" -adj 3 -cw 2 50 -cat 1 "right" 5 -field true -fmn -10000 -fmx 10000 -changeCommand fpsUpdate -min 1 -value 30 sliderFps; //<- was "skmFps"
         textFieldGrp -label "Skeleton Root Joint:" -adj 2 -cat 1 "right" 5 -changeCommand updateSkeletonRoot skmRootField;
         textFieldGrp -label "Output File:" -adj 2 -cat 1 "right" 5 -changeCommand updateOutput skmOutputFile;
         columnLayout -adj true -rs 2 -co "both" 10;
            button -l "Browse Output File" -command "fileBrowserDialog -m 1 -fc \"skmFileCb\" -an \"Select\" -om \"SaveAs\"";
            setParent skmMainWin;
   frameLayout -borderStyle etchedIn -collapsable false -collapse 0 -lv false;
      columnLayout -adj true -rs 5 -co "both" 10;
         button -l "Export Animation" -command "skmExport()";
         setParent skmMainWin;

   //ADD INFO NODES & ATTRIBUTES
   //Create SmartbodyExportOptions node if it doesn't yet exist
   if ( !`objExists "SmartbodyExportOptions"` )
   {
      checkBox -edit -value false loadedBox;
      group -empty -name "SmartbodyExportOptions";
      setAttr "SmartbodyExportOptions.visibility" 0;
   }
   else
   {
      checkBox -edit -value true loadedBox;
   }

   //Check to see if there are any existing animation definitions
   select -hi SmartbodyExportOptions;
   string $tempList[] = `ls -sl`;
   float $animDefsExist = 0;

   for ( $obj in $tempList )
   {
      if ( `substring $obj 1 7` == "AnimDef" )
      {
         $animDefsExist = 1;
         print "Found existing animation definitions. \n";
      }
   }

   string $newAnimName;

   //If no animation definitions exist create a default animation definition
   if ( $animDefsExist == 0 )
   {
      //Create node with setting attributes
      $newAnimName = "DefaultAnim";

         //this bit is meant to get the scene name and anme the anim the same name, not currently working
         /*
         string $FileName = `file -q -sceneName`;
         string $splitFileName[] ;
         int $TempToken = `tokenize $FileName "." $splitFileName` ;
         
         if ($splitFileName[0] == "") {
            $newAnimName = "UnnamedAnim" ;
         }
         else {
            $newAnimName = $splitFileName[0] ; 	
         }
         */

      textScrollList -edit -append $newAnimName scrollListAnim;
      group -n ( "AnimDef_" + $newAnimName ) -em -p SmartbodyExportOptions;

      addAttr -ln "framesPerSecond" -sn "frmsps" -at "long" -min 1 -dv 30 ( "AnimDef_" + $newAnimName );
      addAttr -ln "firstFrameNumber" -sn "fFrm" -at "long" ( "AnimDef_" + $newAnimName );
      addAttr -ln "lastFrameNumber" -sn "lFrm" -at "long" ( "AnimDef_" + $newAnimName );
      addAttr -ln "readyTime" -sn "rdyTime" -at "double" ( "AnimDef_" + $newAnimName );
      addAttr -ln "strokeStartTime" -sn "sStart" -at "double" ( "AnimDef_" + $newAnimName );
      addAttr -ln "emphasisTime" -sn "seTime" -at "double" ( "AnimDef_" + $newAnimName );
      addAttr -ln "strokeTime" -sn "sEnd" -at "double" ( "AnimDef_" + $newAnimName );
      addAttr -ln "relaxTime" -sn "rlxTime" -at "double" ( "AnimDef_" + $newAnimName );

      addAttr -ln "skeletonRoot" -sn "skRoot" -dt "string" ( "AnimDef_" + $newAnimName );
      setAttr -type "string" ( "AnimDef_" + $newAnimName + ".skeletonRoot" ) "base";

      addAttr -ln "outputFile" -sn "outFile" -dt "string" ( "AnimDef_" + $newAnimName );
      setAttr -type "string" ( "AnimDef_" + $newAnimName + ".outputFile" ) ( $newAnimName + ".skm" );

      textScrollList -edit -si $newAnimName scrollListAnim;
      updateAnimUI;

      print( "Default animation definition created: " + $newAnimName + "\n" );
   }

   //Check for pre 0.7 info nodes and transfer their info to default node
   skmUpdateOldFiles( $newAnimName );

   //If animation definitions do exist add these to the UI
   if ( $animDefsExist == 1 )
   {
      for ( $obj in $tempList )
      {
         if ( `substring $obj 1 7` == "AnimDef" )
         {
            string $AnimName = `substring $obj 9 250`;
            textScrollList -edit -append $AnimName scrollListAnim;
            //print "Found existing animation definitions. \n";
         }
      }
   }


   //FINISH
   showWindow skmMainWin;

   print "SKM Exporter window created. \n" ;
}


/*----------------------------------------
GLOBAL PROC: infoPressed
This brings up a help window for setting ready, stroke, relax etc.
----------------------------------------*/
global proc infoPressed()
{
   confirmDialog -title "Ready Stroke Relax help" -message "Ready: Anticipation for the stroke (or action)  \nStroke: Climax of Action- point of greatest emphasis \nRelax: Follow-Thru and Settle of the action \nfor more information consult http://twiki.isi.edu/Public/BMLSpecification" -button "close"  -defaultButton "close";
}


/*----------------------------------------
GLOBAL PROC: fpsUpdate
This updates the scene as the slider is moved
----------------------------------------*/
global proc fpsUpdate()
{
   string $selAnim[] = `textScrollList -q -si "scrollListAnim" `;
   string $AnimDef = ( "AnimDef_" + $selAnim[ 0 ] );
   $fps = `intSliderGrp -q -value sliderFps`;
   setAttr( $AnimDef + ".framesPerSecond" ) $fps;
}


/*----------------------------------------
GLOBAL PROC: firstFrameUpdate
This updates the scene as the slider is moved
----------------------------------------*/
global proc firstFrameUpdate()
{
   string $selAnim[] = `textScrollList -q -si "scrollListAnim" `;
   string $AnimDef = ( "AnimDef_" + $selAnim[ 0 ] );

   int $frameNumber = `intSliderGrp -query -value skmFirstFrameSlider`; // the animator is at this framenumber
   currentTime -edit $frameNumber; // UPDATE THE DISPLAY
   //setAttr "SmartbodyExportOptions.firstFrameNumber" $frameNumber;
   setAttr ( $AnimDef + ".firstFrameNumber" ) $frameNumber;

   //updates ready stroke relax sliders
   intSliderGrp -edit -min $frameNumber sliderReady;
   intSliderGrp -edit -min $frameNumber sliderStrokeStart;
   intSliderGrp -edit -min $frameNumber sliderEmphasis;
   intSliderGrp -edit -min $frameNumber sliderStrokeEnd;
   intSliderGrp -edit -min $frameNumber sliderRelax;
}


/*----------------------------------------
GLOBAL PROC: lastFrameUpdate
This updates the scene as the slider is moved
----------------------------------------*/
global proc lastFrameUpdate()
{
   string $selAnim[] = `textScrollList -q -si "scrollListAnim" ` ;
   string $AnimDef = ( "AnimDef_" + $selAnim[ 0 ] );

   int $frameNumber = `intSliderGrp -query -value skmLastFrameSlider`; // the animator is at this framenumber
   currentTime -edit $frameNumber; // UPDATE THE DISPLAY
   setAttr ( $AnimDef + ".lastFrameNumber" ) $frameNumber;
   //setAttr "SmartbodyExportOptions.lastFrameNumber" $frameNumber;

   //updates ready stroke relax sliders
   intSliderGrp -edit -max $frameNumber sliderReady;
   intSliderGrp -edit -max $frameNumber sliderStrokeStart;
   intSliderGrp -edit -max $frameNumber sliderEmphasis;
   intSliderGrp -edit -max $frameNumber sliderStrokeEnd;
   intSliderGrp -edit -max $frameNumber sliderRelax;
}


/*----------------------------------------
GLOBAL PROC: readyUpdate
This updates the scene as the slider is moved
----------------------------------------*/
global proc readyUpdate()
{
   string $selAnim[] = `textScrollList -q -si "scrollListAnim" `;
   string $AnimDef = ( "AnimDef_" + $selAnim[ 0 ] );
   int $frameNumber = `intSliderGrp -query -value sliderReady`; // the animator is at this framenumber
   setAttr ( $AnimDef + ".readyTime" ) $frameNumber;
   currentTime -edit $frameNumber; // UPDATE THE DISPLAY
}


/*----------------------------------------
GLOBAL PROC: strokeStartUpdate
This updates the scene as the slider is moved
----------------------------------------*/
global proc strokeStartUpdate()
{
   string $selAnim[] = `textScrollList -q -si "scrollListAnim" `;
   string $AnimDef = ( "AnimDef_" + $selAnim[ 0 ] );
   int $frameNumber = `intSliderGrp -query -value sliderStrokeStart`; // the animator is at this framenumber
   setAttr ( $AnimDef + ".strokeStartTime" ) $frameNumber;
   currentTime -edit $frameNumber; // UPDATE THE DISPLAY
}


/*----------------------------------------
GLOBAL PROC: emphasisUpdate
This updates the scene as the slider is moved
----------------------------------------*/
global proc emphasisUpdate()
{
   string $selAnim[] = `textScrollList -q -si "scrollListAnim" `;
   string $AnimDef = ( "AnimDef_" + $selAnim[ 0 ] );
   int $frameNumber = `intSliderGrp -query -value sliderEmphasis`; // the animator is at this framenumber
   setAttr ( $AnimDef + ".emphasisTime" ) $frameNumber;
   currentTime -edit $frameNumber; // UPDATE THE DISPLAY
}


/*----------------------------------------
GLOBAL PROC: strokeUpdate
This updates the scene as the slider is moved
----------------------------------------*/
global proc strokeUpdate ()
{
   string $selAnim[] = `textScrollList -q -si "scrollListAnim" `;
   string $AnimDef = ( "AnimDef_" + $selAnim[ 0 ] );
   int $frameNumber = `intSliderGrp -query -value sliderStrokeEnd`; // the animator is at this framenumber
   setAttr ( $AnimDef + ".strokeTime" ) $frameNumber;
   currentTime -edit $frameNumber; // UPDATE THE DISPLAY
}


/*----------------------------------------
GLOBAL PROC: relaxUpdate
This updates the scene as the slider is moved
----------------------------------------*/
global proc relaxUpdate()
{
   string $selAnim[] = `textScrollList -q -si "scrollListAnim" `;
   string $AnimDef = ( "AnimDef_" + $selAnim[ 0 ] );
   int $frameNumber = `intSliderGrp -query -value sliderRelax`; // the animator is at this framenumber
   setAttr ( $AnimDef + ".relaxTime" ) $frameNumber;
   currentTime -edit $frameNumber; // UPDATE THE DISPLAY
}


/*----------------------------------------
GLOBAL PROC: updateSkeletonRoot
This updates the scene as the slider is moved
----------------------------------------*/
global proc updateSkeletonRoot()
{
   string $selAnim[] = `textScrollList -q -si "scrollListAnim" `;
   string $AnimDef = ( "AnimDef_" + $selAnim[ 0 ] );
   $skeletonRoot = `textFieldGrp -q -text skmRootField` ;
   setAttr -type "string" ( $AnimDef + ".skeletonRoot" ) $skeletonRoot ;
}


/*----------------------------------------
GLOBAL PROC: updateOutput
This updates the scene as the slider is moved
----------------------------------------*/
global proc updateOutput()
{
   string $selAnim[] = `textScrollList -q -si "scrollListAnim" `;
   string $AnimDef = ( "AnimDef_" + $selAnim[ 0 ] );
   $outputFile = `textFieldGrp -q -text skmOutputFile`;
   setAttr -type "string" ( $AnimDef + ".outputFile" ) $outputFile ;
}


/*----------------------------------------
GLOBAL PROC: skmExport
Starts the export process
----------------------------------------*/
global proc skmExport ()
{

   source export_skm_NoGUI;


   print "Beginning export... \n" ;

//NEW
   //Declare variables
   string $tempList[];
   //string $animName;
   string $AnimDefList[];
   int $ArraySize;
   int $ArrayPos;

   //Grab synch point values and check to see if they are valid
   select -hi SmartbodyExportOptions;
   $tempList = `ls -sl`;

   //Add animation definitions to $AnimDefList
   for ( $obj in $tempList )
   {
      if ( `substring $obj 1 7` == "AnimDef" )
      {
         $ArraySize = `size( $AnimDefList )`;
         $ArrayPos = $ArraySize;
         $AnimDefList[ $ArrayPos ] = $obj;

         print( "Put " + $obj + " in " + $ArrayPos + "\n" );
      }
   }

   for ( $AnimDef in $AnimDefList )
   {
      //get synch point values and make sure they are correct
      int $readyVal =       `getAttr( $AnimDef + ".readyTime" )`;
      int $strokeStartVal = `getAttr( $AnimDef + ".strokeStartTime" )`;
      int $emphasisVal =    `getAttr( $AnimDef + ".emphasisTime" )`;
      int $strokeVal =      `getAttr( $AnimDef + ".strokeTime" )`;
      int $relaxVal =       `getAttr( $AnimDef + ".relaxTime" )`;

      if ( $readyVal <= $strokeStartVal && $strokeStartVal <= $emphasisVal && $emphasisVal <= $strokeVal && $strokeVal <= $relaxVal )
      {
         //check to see if ik handles exist
         string $iklist[] = `ls -l -type ikHandle`;
         string $but = "Continue";

         if ( size( $iklist ) > 0 )
         {
            $but = `confirmDialog -title "Confirm"
                                  -message "IK handles exist; animation must be baked"
                                  -button "Continue" -button "Abort" -defaultButton "Continue"
                                  -cancelButton "No" -dismissString "No"`;
         }

         if ( strcmp( $but,"Continue" ) == 0 )
         {
            global string $version;
            int $startFrame = `getAttr( $AnimDef + ".firstFrameNumber" )`;
            int $endFrame =   `getAttr( $AnimDef + ".lastFrameNumber" )`;
            string $root =    `getAttr( $AnimDef + ".skeletonRoot" )`;
            string $file =    `getAttr( $AnimDef + ".outputFile" )`;
            int $fps =        `getAttr( $AnimDef + ".framesPerSecond" )`;

            select -r $root ;   // <-Why select this?
//            currentUnit -linear "cm";

            skmWriteSkmToFileNoGUI( $file, $AnimDef, $startFrame, $endFrame, $fps, $version );
         }
      }
      else
      {
         confirmDialog -title "ERROR: Invalid Synch Point Times" -message "Invalid times given for Ready, Stroke, Relax: make sure Relax occurs after Ready and Stroke etc. Hit help button for more information" -button "close"  -defaultButton "close";
      }
   }
}



/*
//OLD
  //check to see if the Ready, Stroke, Relax have been set correctly set- pop up dialogue box if they have not
	int $readyVal = `intSliderGrp -query -value ready`;
	int $strokeStartVal=  `intSliderGrp -query -value strokeStart`;
	int $emphasisVal=  `intSliderGrp -query -value emphasis`;
	int $strokeVal=  `intSliderGrp -query -value stroke`;
	int $relaxVal=  `intSliderGrp -query -value relax`;
	if ($readyVal<=$strokeStartVal && $strokeStartVal<=$emphasisVal && $emphasisVal<= $strokeVal && $strokeVal<=$relaxVal)
{ 
  
  // check ik handles:
  string $iklist[] = `ls -l -type ikHandle`;
  string $but = "Continue";
  if ( size($iklist)>0 )
   { $but = `confirmDialog -title "Confirm"
       -message "IK handles exist; animation must be baked"
    	-button "Continue" -button "Abort" -defaultButton "Continue"
    	-cancelButton "No" -dismissString "No"`;
   }

  if ( strcmp($but,"Continue")==0 )
   { global string $version; 
     string $root = `textFieldGrp -q -text skmRootField`;
     select -r $root;
     //currentUnit -linear "cm";
     string $file = `textFieldGrp -q -text skmOutputFile`;
     int $startFrame = `intSliderGrp -q -value skmFirstFrameSlider`;
     int $endFrame = `intSliderGrp -q -value skmLastFrameSlider`;
     int $fps = `intSliderGrp -q -value skmFps`;
     skmWriteSkmToFile ( $file, $startFrame, $endFrame, $fps, $version );
     //fprint $file ($outdt);
     //fprint $file ("emphasis: "+$emphasisT); 
  }
}
else{
	confirmDialog -title "ERROR: Invalid Times" -message "Invalid times given for Ready, Stroke, Relax: make sure Relax occurs after Ready and Stroke etc. Hit help button for more information" -button "close"  -defaultButton "close";

}
}
*/




//Launch UI window
skmExportWin;



/*----------------------------------------
SCRIPT INFO
  - joints can have no key data or rotation data, only root may contain translation
  - The order of the joint rotations is considered to be Euler XYZ
  - You cannot change the default name of the animation curves (they have to have the form jointName_rotateX, etc)
  - If the animation uses IK handles, it must be baked before the export
  - To make sure the animation export will be fine, remove all IK handles and check if the animation in Maya is still correct
  - Although the script checks it, it is a good idea to change the settings to cms
 
KNOWN ISSUES
 - under certain conditions, which I have not been able to determine, the output file path will disappear
  
VERSION HISTORY:
  0.1 - first version
  0.2 - smaller files exported (less decimals used)
  0.3 - rounding 5th decimal
  0.4 - corrected recursing into joint hierarchy even if joint has no keys
  Modifications by Ashok Basawapatna
  0.5 - interim solution to allow artists to specify ready, stroke, and relax using the frame numbers (a more graphical solution should be constructed), frame numbers are converted into time values and written to the bottom of the skm in the followin format
	ready time: 0.9333333333
	stroke time: 1.433333333
	relax time: 1.933333333 
  0.6 - another interim solution-- gives the artist access to the time slider for all sliders in order to specify ready, stroke, and relax;start and end frame again writes the times to the bottom of the skm
	adds help button to explain ready, stroke, relax to the artist and also has error check to make sure ready, stroke, relax are valid times
  0.7 - changes by Matt Liewer (liewer@ict.usc.edu)
	disabled timeline resizing when first and last frame values changed
	put all export option attributes onto one node "SmartbodyExportOptions"
	commented code a bit
	general streamlinining of script
	re-organized interface
  0.8 - changes by Matt Liewer (liewer@ict.usc.edu)
	when UI is opened it will check for info created by older version of the exporter and upadte this info to new system
	can now define and export multiple animations per file
*/
