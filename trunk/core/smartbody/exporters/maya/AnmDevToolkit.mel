//  AnmDevToolkit.mel - part of SmartBody Project
//  Copyright (C) 2008  University of Southern California
//
//  SmartBody is free software: you can redistribute it and/or
//  modify it under the terms of the Lesser GNU General Public License
//  as published by the Free Software Foundation, version 3 of the
//  license.
//
//  SmartBody is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  Lesser GNU General Public License for more details.
//
//  You should have received a copy of the Lesser GNU General Public
//  License along with SmartBody.  If not, see:
//      http://www.gnu.org/licenses/lgpl-3.0.txt
//
//  CONTRIBUTORS:
//      Andrew n marshall, USC


/////////////////////////////////////////////////////////
//  Creates a window with various Mel scripting tools.
//

// UI Names:
// the window:        "AnmDevToolkit"
// the menubarLayout: "AnmDevToolkit|menubar"
// the colulmLayout:  "AnmDevToolkit|menubar|colLayout"

////  Sets the development flag, which forces reinitialization on sourcing.
// UNSET or RELEASE = 0, DEVELOPING = 1
global proc AnmDev_setDeveloping( int $value ) {
	global int $AnmDev_isDeveloping;
	$AnmDev_isDeveloping = $value;
}

global proc AnmDev_EditPreferences() {
	global string $AnmDev_TextEditor = "";

	warning ( "AnmDev_EditPreferences(): Unimplemented." );
}

proc string AnmDev_GetTextEditor() {
	global string $AnmDev_TextEditor;
	
	if( !`about -macOS` ) {                      // Macs use system file associations
		if( size( $AnmDev_TextEditor ) == 0 ) {  // Un-initialized
			if( `optionVar -exists "AnmDev_TextEditor"` ) {
				$AnmDev_TextEditor = `optionVar -q "AnmDev_TextEditor"`;
			} else {
				if( !AnmDev_TextEditorPrompt() )
					return "";
			}
		}
	}
	
	return $AnmDev_TextEditor;
}

global proc int AnmDev_TextEditorPrompt() {
	global string $AnmDev_TextEditor;
	
	if( size( $AnmDev_TextEditor ) == 0 ) {
		// Set defaults for the platform
		if( `about -windows` ) {
			$AnmDev_TextEditor = "notepad.exe";
		} else {
			$AnmDev_TextEditor = "/usr/bin/xemacs";
		}
	}
	
	//  Display a modal dialog prompt...
	string $result =
		`layoutDialog
			-title    "Select an editor..."
			-uiScript "AnmDev_BuildTextEditorPrompt();"
			-parent   "AnmDevToolkit"`;
	//print ( "AnmDev_TextEditorPrompt(): $result = \""+$result+"\"\n" );
	
	if( $result == "dismiss" ) {
		warning "AnmDev_TextEditorPrompt(): User cancelled selection of editor (or really did want \"dismiss\" as an text editor).";
		return false;
	} else {
		$AnmDev_TextEditor = $result;
		optionVar -stringValue "AnmDev_TextEditor" $AnmDev_TextEditor;
		return true;
	}
}

global proc AnmDev_BuildTextEditorPrompt() {
	global string $AnmDev_TextEditor;

	//  TODO: replace with a real dialog..
	//		This source was grabbed from the Maya Mel docs on layoutDialog

	// Get the dialog's formLayout.
	//
	string $form = `setParent -q`;

	// layoutDialog's are not resizable, so hard code a size here,
	// to make sure all UI elements are visible.
	//
	formLayout -e -width 300 $form;

	string $prompt = `text -l "Please select an editor."`;
	string $field  = `textField -text $AnmDev_TextEditor`;
	string $field_encoded = "\""+`encodeString $field`+"\"";                    // with quotes
	
	string $browse_command = "AnmDev_TextEditorBrowse( "+$field_encoded+" );";
	//print ( "$browse_command = "+$browse_command+"\n" );
	string $browse = `button -label "Browse" -command $browse_command`;
	
	string $ok_command = "layoutDialog -dismiss `textField -q -text "+$field_encoded+"`";
	//print ( "$ok_command = "+$ok_command+"\n" );
	
	string $ok     = `button -l "OK" -c $ok_command`;
	string $cancel = `button -l "Cancel" -c "layoutDialog -dismiss \"dismiss\""`;

	int $spacer = 5;
	int $top = 5;
	int $edge = 5;

	formLayout -edit
		-attachForm			$prompt	"top"		$top
		-attachForm			$prompt	"left"		$edge
		-attachNone			$prompt	"bottom"
		-attachForm			$prompt	"right"		$edge
		
		-attachControl		$browse	"top"		$spacer $prompt
		-attachNone			$browse	"left"
		-attachNone			$field	"bottom" 
		-attachForm			$browse	"right"		$edge

		-attachControl		$field	"top"		$spacer $prompt
		-attachForm			$field	"left"		$edge 
		-attachNone			$field	"bottom" 
		-attachControl		$field	"right"		$spacer $browse

		-attachControl		$cancel	"top"		$spacer $browse
		-attachNone			$cancel	"left"		//$spacer 33
		-attachNone			$cancel	"bottom"
		-attachForm			$cancel	"right"		$edge

		-attachControl		$ok		"top"		$spacer $browse
		-attachNone			$ok		"left"		//$spacer 66
		-attachNone			$ok		"bottom"
		-attachControl		$ok		"right"		$spacer $cancel
	$form;
}

global proc AnmDev_TextEditorBrowse( string $field ) {
	string $result = `fileDialog`;
	if( $result != "" ) {
		textField -edit -text $result $field;
	}
}


proc string  AnmDev_getTextEditCommand( string $path ) {
	global string $AnmDev_TextEditor;

	$path = toNativePath( $path );  // Necessary for windows, but we do it for everyone to be safe...

	// The following is derived from
	// David Gould's "Complete Maya Programming" section 3.3.3
	if( `about -windows` ) {
		if( false ) {  // Can windows handle the mapping the .mel file type to the text editting app?
			// Windows is wonky...
			if( false ) {
				return ( "start \""+$path+"\"" );  // It would work if the path wasn't fully specified and quoted
			} else {
				// Ed's suggestion (didn't work either)
				string $dir = toNativePath( dirname( $path ) );
				string $base = basename( $path, "" );
				//return ( "start /D\""+$dir+"\" \""+$base+"\"" );  // still nothing
				// no quotes around base?
				return ( "start /D\""+$dir+"\" "+$base );  // At least this one produces a command that works from cmd.exe (but not Maya)
			}
		} else {
			string $editor = AnmDev_GetTextEditor();
			if( size( $editor ) > 0 ) {  // valid editor (user didn't cancel selection)
				//  TODO: prevent new app per edit?
				return ( "start \""+$editor+"\" \""+$path+"\"" );
			}
		}
	}
	
	if( `about -macOS` ) {
		//return ( "open -e "+$path );  // Opens TextEdit on my machine.  Don't know how to override the editor application..
		return ( "open \""+$path+"\"" );
	}
	
	// Assume it is a Unix variant... (untested)
	string $editor = AnmDev_GetTextEditor();
	if( size( $editor ) > 0 ) {  // valid editor (user didn't cancel selection)
		//  TODO: prevent new app per edit?
		return ( $AnmDev_TextEditor+" \""+$path+"\" >/dev/null 2>&1 &" );  // seems dangerous to throw all output away.
	}
}

global proc AnmDev_EditScript( string $path ) {
	string $edit_command   = AnmDev_getTextEditCommand( $path );  // external command
	if( $edit_command != "" ) {  // cancel
		print ( "$edit_command = "+ $edit_command+"\n" );
		system( $edit_command );
	}
}

global proc AnmDev_AddScriptUI( string $path ) {
	string $ext = fileExtension( $path );
	if( size( $ext ) > 0 )
		$ext = "." + $ext;
	string $name = basename( $path, $ext );

	string $ui_path =
		`rowLayout
			-parent "AnmDevToolkit|menubar|colLayout"
			-numberOfColumns 4
			-columnWidth4 100 30 30 11
			-columnAttach4 both both both both
			-adjustableColumn 1`;
	if( size( $ui_path ) > 0 ) {  // control created
		string $run_command    = "source \""+$path+"\";";
		string $edit_command   = "AnmDev_EditScript( \""+`encodeString $path`+"\" )";
		string $delete_command = "deleteUI \""+$ui_path+"\"";

		text -label $name;
		button -label "Run"   // Sources the script
			-align "center"
			-c $run_command;
		button -label "Edit"  // Opens in default editor
			-align "center"
			-c $edit_command;
		button -label "X"  // Removes this script from the list
			-align "center"
			-c $delete_command;
	} else {
		warning ( "AnmDevToolkit: Failed to add UI for script \""+$path+"\"\n" );
	}
}

global proc AnmDev_OpenScriptPrompt( int $isNew ) {
	global string $AnmDev_LastPath;
	
	if( size( $AnmDev_LastPath )==0 ) {
		$AnmDev_LastPath = `internalVar -userScriptDir`;
		print ( "AnmDev: Initialized \$AnmDev_LastPath to \""+$AnmDev_LastPath+"\"\n" );
	}

	string $path = $AnmDev_LastPath;
	// if( `about -windows` ) {  // TODO: Fixed windows file browser
	if( false ) {
		// Windows specific file dialog
		if( $isNew ) {
			$path =
				`fileBrowserDialog
					-mode 1  // save file mode
					-operationMode "SaveAs"
					-fileType "mel"`;  // TODO: complete this dialog command
		} else {
			$path =
				`fileBrowserDialog
					-mode 0  // open file mode
					-fileType "mel"`;  // TODO: complete this dialog command
		}
	} else {
		if( $isNew ) {
			// TODO: How do I create a dialog that can create new files?
		}
	
		$path = ( $path + "*.mel" );  // file type specifier
		$path =	`fileDialog -directoryMask $path`;
	}
	
	if( size( $path ) > 0 ) {  // File selected
	    print ( "AnmDev_NewScriptPrompt(): selected \""+$path+"\"\n" );

		$AnmDev_LastPath = dirname( $path );  // Save last directory
		
		AnmDev_AddScriptUI( $path );
	}
}

global proc showAnmDevToolkit() {
	global int $AnmDev_isDeveloping; // UNSET or RELEASE = 0, DEVELOPING = 1

	string $win = "AnmDevToolkit";

	if( $AnmDev_isDeveloping==1 && `window -exists $win` ) {
		print "AnmDevToolkit: Development Mode: Deleting prior window instance\n";
		deleteUI $win;
	}
	
	if( !`window -exists $win` ) {
		// Build new user interface
		string $win_path = `window -title $win $win`;
			string $mbl_path = `menuBarLayout "menubar"`;
				menu -label "File";
					menuItem -label "New..."
						-command "AnmDev_OpenScriptPrompt( true )";  // new file
					menuItem -label "Open..."
						-command "AnmDev_OpenScriptPrompt( false )"; // existing file
				if( !`about -macOS` ) {
					menu -label "Edit";
						menuItem -label "Text Editor..."
							-command "AnmDev_TextEditorPrompt()";
				}
				setParent ..;
			string $col_path = `columnLayout -adjustableColumn true "colLayout"`;
		
		//print ( "win_path: \""+$win_path+"\"\n" );
		//print ( "mbl_path: \""+$mbl_path+"\"\n" );
		//print ( "col_path: \""+$col_path+"\"\n" );
	}
	showWindow $win;
}

if( !`about -batch` ) {
	// Show the window upon sourcing the file
	showAnmDevToolkit();
	
	if( false ) {  // layout test
		AnmDev_AddScriptUI( "Example_001" );
		AnmDev_AddScriptUI( "Example_002" );
		AnmDev_AddScriptUI( "Example_003" );
		AnmDev_AddScriptUI( "Example_004" );
		AnmDev_AddScriptUI( "Example_005" );
		AnmDev_AddScriptUI( "Example_006" );
	}
}