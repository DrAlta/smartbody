//  sbm_viewer.mel - part of SmartBody Project
//  Copyright (C) 2005-2008  University of Southern California
//
//  SmartBody is free software: you can redistribute it and/or
//  modify it under the terms of the Lesser GNU General Public License
//  as published by the Free Software Foundation, version 3 of the
//  license.
//
//  SmartBody is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  Lesser GNU General Public License for more details.
//
//  You should have received a copy of the Lesser GNU General Public
//  License along with SmartBody.  If not, see:
//      http://www.gnu.org/licenses/lgpl-3.0.txt
//
//  CONTRIBUTORS:
//      Yuyu Xu, USC ICT

string $sbmViewerVersion = "0.5";


// get current viewer preference
global proc string getSelectedViewerPreference()
{
	string $selected[] = `textScrollList -q -selectItem scrollListPreference`;
	return ("Viewer_" + $selected[0]);
}

// check whether there is existing preference, if not, create default one
global proc viewerPreferenceCheck()
{
	if ( !`objExists SmartbodyViewerOptions` )
	{
		group -empty -name "SmartbodyViewerOptions";
		setAttr "SmartbodyViewerOptions.visibility" 0;
	}


	// Check to see if there are any existing preference
	select -hi SmartbodyViewerOptions;
	string $prefList[] = `ls -sl`;

	int $numPref = 0;
	for ($pref in $prefList)
	{
		if (startsWith($pref, "Viewer_"))
			$numPref ++;
	}

	if ($numPref == 0)
		$prefList = {"Viewer_Default"};

	// clean preference list first
	textScrollList -e -removeAll scrollListPreference;
	for ($pref in $prefList)
	{
		if (!startsWith($pref, "Viewer_"))
			continue;
		
		// Create New pref Instance if not exist!
		if (!`objExists $pref`)
		{
			group -empty -name $pref -parent SmartbodyViewerOptions;	
		}

		// advanced setting attributes
		if (!`objExists($pref + ".SbmBin")`)
		{
			addAttr -longName "SbmBin" -dataType "string" $pref;
			setAttr -type "string" ($pref + ".SbmBin") "C:/Projects/Pando/scripts/SmartBodyRunTime/bin/sbm-fltk.exe";
		}		
		
		// viewer option attributes
		if (!`objExists($pref + ".SkeletonDir")`)
		{
			addAttr -longName "SkeletonDir" -dataType "string" $pref;
			setAttr -type "string" ( $pref + ".SkeletonDir" ) "";
		}
		if (!`objExists($pref + ".MotionDir")`)
		{
			addAttr -longName "MotionDir" -dataType "string" $pref;
			setAttr -type "string" ( $pref + ".MotionDir" ) "";
		}
		if (!`objExists($pref + ".BindingDir")`)
		{
			addAttr -longName "BindingDir" -dataType "string" $pref;
			setAttr -type "string" ( $pref + ".BindingDir" ) "";
		}		
		if (!`objExists($pref + ".SkeletonName")`)
		{
			addAttr -longName "SkeletonName" -dataType "string" $pref;
			setAttr -type "string" ( $pref + ".SkeletonName" ) "";
		}
		if (!`objExists($pref + ".MotionName")`)
		{
			addAttr -longName "MotionName" -dataType "string" $pref;
			setAttr -type "string" ( $pref + ".MotionName" ) "";
		}			
		if (!`objExists($pref + ".MeshName")`)
		{
			addAttr -longName "MeshName" -dataType "string" $pref;
			setAttr -type "string" ( $pref + ".MeshName" ) "";
		}	
		if (!`objExists($pref + ".BindingName")`)
		{
			addAttr -longName "BindingName" -dataType "string" $pref;
			setAttr -type "string" ( $pref + ".BindingName" ) "";
		}			
	}
}

// create a new preference
global proc viewerPreferenceCreate()
{
	string $result = `promptDialog -title "Define New Animation" -message "Animation Name?"
					-button "OK" -button "Cancel"
					-defaultButton "OK" -cancelButton "Cancel"
					-dismissString "Cancel"`;
	
	if ($result == "OK")
	{
		$newPrefName = `promptDialog -query -text`;
		// add the preference attribute
		group -empty -name ( "Viewer_" + $newPrefName ) -parent SmartbodyViewerOptions;
		
		// populate the attribute with all data		
		select -hi SmartbodyViewerOptions;
		string $prefList[] = `ls -sl`;		
		viewerPreferenceCheck();
		updateViewerUI();
	}
}

// rename the current preference
global proc viewerPreferenceRename()
{
	// Create "new name" prompt window
	string $PromptResult = `promptDialog -title "Rename Selected Preference" -message "New Preference Name?"
							-button "Rename" -button "Cancel"
							-defaultButton "Rename" -cancelButton "Cancel"
							-dismissString "Cancel"`;
	if ($PromptResult == "Rename")
	{
		string $newPrefName = `promptDialog -q -text`;
		string $selPref[] = `textScrollList -q -selectItem scrollListPreference`; // without prefix "Viewer_"
		string $curPref = getSelectedViewerPreference();	// with prefix "Viewer_"
		if ($curPref != "Viewer_")
		{
			rename ($curPref) ("Viewer_" + $newPrefName);
			textScrollList -e -removeItem $selPref[0] scrollListPreference;
			textScrollList -e -append $newPrefName scrollListPreference;
			textScrollList -e -selectItem $newPrefName scrollListPreference;		
		}
		else
			print ("Warning: No preference is selected");
	}
}

global proc viewerPreferenceReset()
{
	string $curPref = getSelectedViewerPreference();
	setAttr -type "string"($curPref + ".SkeletonDir") "";
	setAttr -type "string"($curPref + ".MotionDir") "";
	setAttr -type "string"($curPref + ".BindingDir") "";	
	setAttr -type "string"($curPref + ".SkeletonName") "";
	setAttr -type "string"($curPref + ".MotionName") "";
	setAttr -type "string"($curPref + ".MeshName") "";
	setAttr -type "string"($curPref + ".BindingName") "";
	
	updateViewerUI();
}

// delete current preference
global proc viewerPreferenceDelete()
{
	string $selPref[] = `textScrollList -q -selectItem scrollListPreference`;
	string $curPref = getSelectedViewerPreference();	
	textScrollList -e -removeItem $selPref[0] scrollListPreference;
	delete $curPref;
	updateViewerUI();
}

// update sk text field
global proc skFileBrowser(string $fileName, string $fileType)
{
	string $curPref = getSelectedViewerPreference();
	setAttr -type "string" ($curPref + ".SkeletonDir") $fileName;
	setAttr -type "string" ($curPref + ".SkeletonName") "";
	updateViewerUI();
}

// update skm text field
global proc skmFileBrowser(string $fileName, string $fileType)
{
	string $curPref = getSelectedViewerPreference();
	setAttr -type "string" ($curPref + ".MotionDir") $fileName;
	setAttr -type "string" ($curPref + ".MotionName") "";	
	updateViewerUI();
}

// update binding text field
global proc bindingFileBrowser(string $fileName, string $fileType)
{
	string $curPref = getSelectedViewerPreference();
	setAttr -type "string" ($curPref + ".BindingDir") $fileName;
	setAttr -type "string" ($curPref + ".BindingName") "";	
	setAttr -type "string" ($curPref + ".MeshName") "";		
	updateViewerUI();
}

global proc updateSkDirAttr()
{
	string $curPref = getSelectedViewerPreference();
	setAttr -type "string" ($curPref + ".SkeletonDir") `textFieldGrp -q -text skDir`;
	setAttr -type "string" ($curPref + ".SkeletonName") "";	
	updateViewerUI();	
}

global proc updateSkmDirAttr()
{
	string $curPref = getSelectedViewerPreference();
	setAttr -type "string" ($curPref + ".MotionDir") `textFieldGrp -q -text skmDir`;
	setAttr -type "string" ($curPref + ".MotionName") "";	
	updateViewerUI();	
}

global proc updateBindingDirAttr()
{
	string $curPref = getSelectedViewerPreference();
	setAttr -type "string" ($curPref + ".BindingDir") `textFieldGrp -q -text bindingDir`;
	setAttr -type "string" ($curPref + ".BindingName") "";	
	setAttr -type "string" ($curPref + ".MeshName") "";		
	updateViewerUI();
}

// update scroll list attributes
global proc updateSkAttr()
{
	string $curPref = getSelectedViewerPreference();
	string $selected[] = `textScrollList -q -selectItem scrollListSkeleton`;		
	setAttr -type "string"($curPref + ".SkeletonName") $selected[0];	
}

global proc updateSkmAttr()
{
	string $curPref = getSelectedViewerPreference();
	string $selected[] = `textScrollList -q -selectItem scrollListMotion`;		
	setAttr -type "string"($curPref + ".MotionName") $selected[0];
}

global proc updateOpenColladaAttr()
{
	string $curPref = getSelectedViewerPreference();
	string $selected[] = `textScrollList -q -selectItem scrollListBinding`;		
	setAttr -type "string"($curPref + ".BindingName") $selected[0];
}

global proc updateObjAttr()
{
	string $curPref = getSelectedViewerPreference();
	string $selected[] = `textScrollList -q -selectItem scrollListMesh`;	
	int $i;
	string $meshAttr;
	for ($i = 0; $i < size($selected); $i = $i + 1)
		$meshAttr = $meshAttr + " " + $selected[$i];
	setAttr -type "string"($curPref + ".MeshName") $meshAttr;
}

global proc updateSbmBinAttr()
{
	string $curPref = getSelectedViewerPreference();
	setAttr -type "string"($curPref + ".SbmBin") `textFieldGrp -q -text smartbodyBin`;		
}

global proc selectAllMesh()
{
	string $curPref = getSelectedViewerPreference();
	string $allMesh[] = `textScrollList -q -allItems scrollListMesh`;
	int $i;
	for ($i = 0; $i < size($allMesh); $i = $i + 1)
		textScrollList -e -selectItem $allMesh[$i] scrollListMesh;
	updateObjAttr();
}

global proc clearAllMesh()
{
	string $curPref = getSelectedViewerPreference();
	textScrollList -e -deselectAll scrollListMesh;
	updateObjAttr();
}

// update the UI according to selected viewer preference
global proc	updateViewerUI()
{
	int $i;
	
	// update preference scroll list
	select -hi SmartbodyViewerOptions;
	string $viewerList[] = `ls -sl`;
	string $prefList[] = `textScrollList -q -allItems scrollListPreference`;
	for ( $viewer in $viewerList )
	{
		if (!startsWith( $viewer, "Viewer_" ))
			continue;

		string $viewerSubstring = substituteAllString($viewer, "Viewer_", "");
		int $found = 0;
		for ($pref in $prefList)
		{
			if ($viewerSubstring == $pref)
				$found = 1;
		}
		if (!$found)
			textScrollList -e -append $viewerSubstring scrollListPreference;
	}	
	string $curPref = getSelectedViewerPreference();
	if (($curPref == "Viewer_") && (size($viewerList) > 1))
	{
		textScrollList -e -selectIndexedItem 1 scrollListPreference;	
		$curPref = getSelectedViewerPreference();
	}

	//------ Update other UI	
	textScrollList -e -removeAll scrollListSkeleton;
	textScrollList -e -removeAll scrollListMotion;
	textScrollList -e -removeAll scrollListMesh;
	textScrollList -e -removeAll scrollListBinding;	
	
	if ($curPref == "Viewer_")
	{
		textFieldGrp -e -text "" skDir;	
		textFieldGrp -e -text "" skmDir;	
		textFieldGrp -e -text "" bindingDir;		
		textFieldGrp -e -text "" smartbodyBin;
	}
	else
	{	
		string $skDir = `getAttr ($curPref + ".SkeletonDir")`;	
		string $skmDir = `getAttr ($curPref + ".MotionDir")`;
		string $bindingDir = `getAttr ($curPref + ".BindingDir")`;	
		string $skeletonName = `getAttr ($curPref + ".SkeletonName")`;	
		string $motionName = `getAttr ($curPref + ".MotionName")`;
		string $bindingName = `getAttr ($curPref + ".BindingName")`;			
		string $meshName = `getAttr ($curPref + ".MeshName")`;		

		textFieldGrp -e -text $skDir skDir;
		if (`filetest -d ($skDir + "/")`)
		{
			string $skFiles[] = `getFileList -folder ($skDir + "/") -filespec "*.sk"`;
			for ($i = 0; $i < size($skFiles); $i = $i + 1)
				textScrollList -e -append $skFiles[$i] scrollListSkeleton;
		}
		else
			print ("WARNING: Directory Not Valid!");
		
		textFieldGrp -e -text $skmDir skmDir;
		if (`filetest -d ($skmDir + "/")`)
		{
			string $skmFiles[] = `getFileList -folder ($skmDir + "/") -filespec "*.skm"`;
			for ($i = 0; $i < size($skmFiles); $i = $i + 1)
				textScrollList -e -append $skmFiles[$i] scrollListMotion;
		}
		else
			print ("WARNING: Directory Not Valid!");

		textFieldGrp -e -text $bindingDir bindingDir;
		if (`filetest -d ($bindingDir + "/")`)
		{
			string $bindingFiles[] = `getFileList -folder ($bindingDir + "/") -filespec "*.xml"`;
			string $objFiles[] = `getFileList -folder ($bindingDir + "/") -filespec "*.obj"`;
			for ($i = 0; $i < size($bindingFiles); $i = $i + 1)
				textScrollList -e -append $bindingFiles[$i] scrollListBinding;
			for ($i = 0; $i < size($objFiles); $i = $i + 1)
				textScrollList -e -append $objFiles[$i] scrollListMesh;				
		}
		else
			print ("WARNING: Directory Not Valid!");
		
		
		if ($skeletonName != "")
			textScrollList -e -selectItem $skeletonName scrollListSkeleton;
		if ($motionName != "")
			textScrollList -e -selectItem $motionName scrollListMotion;	
		if ($bindingName!= "")
			textScrollList -e -selectItem $bindingName scrollListBinding;
		if ($meshName != "")
		{	
			string $meshList[];
			tokenize $meshName " " $meshList;
			for ($i = 0; $i < size($meshList); $i = $i + 1)
				textScrollList -e -selectItem $meshList[$i] scrollListMesh;		
		}
		// by default select all mesh
		selectAllMesh();
			
		// advanced setting
		textFieldGrp -e -text (`getAttr ($curPref + ".SbmBin")`) smartbodyBin;
	}
}

global proc int detectProcess(string $processName)
{
	string $processString = system("tasklist");
	string $processList[];
	tokenize $processString " \n\t" $processList;
	int $found = stringArrayContains($processName, $processList);
	return $found;
}


// this function get called when the "run smartbody" button is pressed
global proc viewerRunButton()
{
	int $noError = 1;
	// getting attr of current preference
	string $curPref = getSelectedViewerPreference();
	string $skeletonDir = `getAttr ($curPref + ".SkeletonDir")`;
	string $motionDir = `getAttr ($curPref + ".MotionDir")`;
	string $smoothBindingDir = `getAttr ($curPref + ".BindingDir")`;
	string $skeleton = `getAttr ($curPref + ".SkeletonName")`;	
	string $motion = `getAttr ($curPref + ".MotionName")`;	
	string $bindingInfo = `getAttr ($curPref + ".BindingName")`;	
	string $mesh = `getAttr ($curPref + ".MeshName")`;	
	string $sbmBin = `getAttr ($curPref + ".SbmBin")`;
	
	
	// getting other setting
	string $binDir = dirname($sbmBin);	
	string $binName = basename($sbmBin, "");		
	string $scriptDir = $binDir + "/../scripts";
	string $seqFile = $scriptDir + "/" + "mayaSbmViewer.seq";
	
	string $character = "defaultCharacter";
	string $motionName = basename($motion, ".skm");		
	string $skeletonName = basename($skeleton, "");			

	//------- Process begins here
	int $foundProcess = detectProcess($binName);
	int $fileExistFlag = `filetest -e $seqFile`;
	if ($fileExistFlag == 1)
		sysFile -delete $seqFile;
		
	if (!`filetest -x $sbmBin`)
		print ("Sbm Run Time Problem, Please Check Advanced Setting!\n");
	else
	{
		if (!$foundProcess)
		{
			// default setting
			system("echo " + "# " + $seqFile + " >> " + $seqFile);
			
			// viewer and camera setting
			system("echo 0.2 viewer open   800 800  50 50" + " >> " + $seqFile);	
			system("echo 0.2 camera eye    0 166 185" + " >> " + $seqFile);	
			system("echo 0.2 camera center 0 92 0" + " >> " + $seqFile);		
			
			//	load skeleton
			if ($skeleton != "")
			{
				system("echo 0 path ME " + $skeletonDir  + " >> " + $seqFile);
				system("echo 0.1 char " + $character + " init " + $skeletonName + " >> " + $seqFile);
				system("echo 0.1 set character " +  $character + " world_offset x 0 y 102 h 0" + " >> " + $seqFile);				
			}
			else
			{
				confirmDialog -title "Hint" -message "Please select a skeleton" -button "Ok" -defaultButton "Ok" -dismissString "Ok";
				$noError = 0;
			}
				
			//	load motion
			if ($motion != "")
			{
				system("echo 0 path ME " + $motionDir  + " >> " + $seqFile);
				system("echo 0 load motions -R " + $motionDir  + " >> " + $seqFile);	
			}
			else
			{
				confirmDialog -title "Hint" -message "Please select a motion" -button "Ok" -defaultButton "Ok" -dismissString "Ok";	
				$noError = 0;
			}			
			
			// check if need to be run under smooth binding mode
			string $meshList[];
			tokenize $mesh " " $meshList;
			int $i;
			if ($bindingInfo != "")
			{
				system("echo 0.2 char " + $character + " smoothbindweight " + $smoothBindingDir + "/" + $bindingInfo + " >> " + $seqFile);
				if ($mesh != "")
				{
					for ($i = 0; $i < size($meshList); $i = $i + 1)
						system("echo 0.2 char " + $character + " smoothbindmesh " + $smoothBindingDir + "/" + $meshList[$i] + " >> " + $seqFile);	
					system("echo 3.5 char " + $character + " viewer 4 " + " >> " + $seqFile);	
					system("echo 4 test bml char " + $character + " ^<animation name=\"" + $motionName + "\"\/^>" + " >> " + $seqFile);					
				}
				else
				{
					confirmDialog -title "Hint" -message "Please select a binding xml file" -button "Ok" -defaultButton "Ok" -dismissString "Ok";
					system("echo 0.2 char " + $character + " viewer 0 " + " >> " + $seqFile);
					system("echo 0.3 test bml char " + $character + " ^<animation name=\"" + $motionName + "\"\/^>" + " >> " + $seqFile);				
				}
			}
			else
			{
				system("echo 0.2 char " + $character + " viewer 0 " + " >> " + $seqFile);
				system("echo 0.3 test bml char " + $character + " ^<animation name=\"" + $motionName + "\"\/^>" + " >> " + $seqFile);				
			}			
				
			string $runCommand = "start " + $sbmBin + " -seqpath " + $scriptDir + " -seq " + "mayaSbmViewer.seq";
			if ($noError)
				system($runCommand);		
		}
		else
		{
			//	load motion
			if ($motion != "")
			{			
				if ($skeleton != "")		
					system("echo 0 test bml char " + $character + " ^<animation name=\"" + $motionName + "\"\/^>" + " >> " + $seqFile);	
				else
					confirmDialog -title "Hint" -message "Please select a skeleton" -button "Ok" -defaultButton "Ok" -dismissString "Ok";
			}
			string $runCommand = $binDir + "/elsender.exe -m " + "\"sbm seq mayaSbmViewer.seq\"";
			system($runCommand); 
		}
	}
}

//--------------------- Main Window ------------------------
global proc sbmViewerGUI()
{
	global string $sbmViewerVersion;
	if ( ( `window -exists viewerMainWin` ) == true )
	{
		deleteUI viewerMainWin;
		windowPref -remove viewerMainWin;
	}	
	
	// create UI Window here
	window -title ("Smartbody Viewer v" + $sbmViewerVersion) -resizeToFitChildren true -sizeable true viewerMainWin;
	columnLayout -adjustableColumn true -columnAttach "both" 5;
	
		frameLayout -label "SmartBody Preferences" -borderStyle etchedIn -collapsable false -collapse 0;
			columnLayout -adjustableColumn true -rowSpacing 2 -columnOffset "both" 10;
				textScrollList  -numberOfRows 3 -width 250 -height 50 -allowMultiSelection false -showIndexedItem 4 -selectCommand updateViewerUI scrollListPreference;
				rowColumnLayout -numberOfRows 1 -rowHeight 1 20 -rowSpacing 1 2 -columnAttach 1 "right" 3;
					button -label "Create Preference" -align "center" -command viewerPreferenceCreate;
					button -label "Rename Preference" -align "center" -command viewerPreferenceRename;
					button -label "Delete Preference" -align "center" -command viewerPreferenceDelete;
					button -label "Reset Preference" -align "center" -command viewerPreferenceReset;
					setParent viewerMainWin;	
	
		frameLayout -label "Viewer Option" -borderStyle etchedIn -collapsable true -collapse 0;	
			columnLayout -adjustableColumn true;
				rowColumnLayout -numberOfRows 1 -rowHeight 1 20 -rowSpacing 1 2 -columnAttach 1 "right" 3;
					textFieldGrp -label "SK Directory: " -adjustableColumn 2 -columnAttach 1 "right" 5 -changeCommand updateSkDirAttr skDir;				
					button -label ".." -align "center" -command "fileBrowserDialog -m 4 -fc \"skFileBrowser\" -an \"Select\" -om \"SaveAs\"";	
					setParent ..;		
				text -label "Skeleton List";
				textScrollList -width 250 -height 50 -allowMultiSelection false -showIndexedItem 3 -selectCommand updateSkAttr scrollListSkeleton;
				
				rowColumnLayout -numberOfRows 1 -rowHeight 1 20 -rowSpacing 1 2 -columnAttach 1 "right" 3;
					textFieldGrp -label "SKM Directory: " -adjustableColumn 2 -columnAttach 1 "right" 5 -changeCommand updateSkmDirAttr skmDir;				
					button -label ".." -align "center" -command "fileBrowserDialog -m 4 -fc \"skmFileBrowser\" -an \"Select\" -om \"SaveAs\"";	
					setParent ..;				
				text -label "Motion List";
				textScrollList -width 250 -height 100 -allowMultiSelection false -showIndexedItem 3 -selectCommand updateSkmAttr scrollListMotion;

				rowColumnLayout -numberOfRows 1 -rowHeight 1 20 -rowSpacing 1 2 -columnAttach 1 "right" 3;
					textFieldGrp -label "Binding Directory: " -adjustableColumn 2 -columnAttach 1 "right" 5 -changeCommand updateBindingDirAttr bindingDir;				
					button -label ".." -align "center" -command "fileBrowserDialog -m 4 -fc \"bindingFileBrowser\" -an \"Select\" -om \"SaveAs\"";	
					setParent ..;				
				text -label "Binding Info List";
				textScrollList -width 250 -height 30 -allowMultiSelection false -showIndexedItem 3 -selectCommand updateOpenColladaAttr scrollListBinding;				
				text -label "Mesh List";
				textScrollList -width 250 -height 100 -allowMultiSelection true -showIndexedItem 3 -selectCommand updateObjAttr scrollListMesh;
				rowColumnLayout -numberOfRows 1 -rowHeight 1 20 -rowSpacing 1 2 -columnAttach 1 "right" 3;
					button -label "Select All" -align "center" -command selectAllMesh;
					button -label "Clear All" -align "center" -command clearAllMesh;
					setParent viewerMainWin;

		frameLayout -borderStyle etchedIn -collapsable true -collapse 1 -label "Smooth Binding Exporter";
			columnLayout -adjustableColumn true;
				button -label "Smooth Binding Exporter" -command "source export_smoothbinding.mel; smoothbindingExportGUI";
				setParent viewerMainWin;
				
		frameLayout -borderStyle etchedIn -collapsable true -collapse 1 -label "Advanced Setting";
			columnLayout -adjustableColumn true;
				textFieldGrp -label "SBM Bin: " -adjustableColumn 2 -columnAttach 1 "right" 5 -changeCommand updateSbmBinAttr smartbodyBin;
				setParent viewerMainWin;
		
		frameLayout -borderStyle etchedIn -collapsable false -collapse 0 -labelVisible false;
			columnLayout -adjustableColumn true -rowSpacing 5 -columnOffset "both" 10;
				button -label "Run Smartbody" -command viewerRunButton;
				setParent viewerMainWin;								
	
	// Intialization to Viewer UI
	viewerPreferenceCheck();
	updateViewerUI();
	
	// Show the Main Window
	showWindow viewerMainWin;
}

/*--------------------------------------------
VERSION HISTORY:
  0.1 - first version
  0.2 - supporting viewer preference, smooth binding
  0.3 - add quick test mode. If sk and skm text field is filled up, this mode is activated
  0.4 - re-design the UI to make the tool more flexible
  0.5 - add the smooth binding exporter
  
LIMIT:
  - after sbm-fltk.exe is setup, user can only change the motion
*/