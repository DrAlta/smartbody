//  export_sk.mel - part of SmartBody Project
//  Copyright (C) 2005-2008  University of Southern California
//
//  SmartBody is free software: you can redistribute it and/or
//  modify it under the terms of the Lesser GNU General Public License
//  as published by the Free Software Foundation, version 3 of the
//  license.
//
//  SmartBody is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  Lesser GNU General Public License for more details.
//
//  You should have received a copy of the Lesser GNU General Public
//  License along with SmartBody.  If not, see:
//      http://www.gnu.org/licenses/lgpl-3.0.txt
//
//  CONTRIBUTORS:
//      Marcelo Kallmann, USC (currently at UC Merced)
//      Ashok Basawapatna, USC (no longer)
//      Andrew n marshall, USC
//      Kristin Parker, USC



////////////////////////////////////////////////////////////////
//  Exports animation skeleton in .sk format for SmartBody
//  Requires SkViewer to bind the .objs to the .sk skeleton
//  Will create attribute nodes to keep exporter information between Maya sessions


global proc int skRootJointChanged()
{
   string $root = `textFieldGrp -q -text skRootField`;
   setAttr -type "string" SkelDef.RootJoint $root;
   return 1;
}


global proc int skNameChanged()
{
   string $name = `textFieldGrp -q -text skOutputName`;

   string $filepath = `textFieldGrp -q -text skOutputFile`;
   textFieldGrp -e -text ( `dirname($filepath)` + "/" + $name + ".sk" ) skOutputFile;

   setAttr -type "string" SkelDef.SkeletonName $name;


   string $file = `textFieldGrp -q -text skOutputFile`;
   setAttr -type "string" SkelDef.OutputDirectory $file;

   return 1;
}


global proc int skOutputDirChanged()
{
   string $file = `textFieldGrp -q -text skOutputFile`;
   setAttr -type "string" SkelDef.OutputDirectory $file;
   return 1;
}


global proc int skFileCb( string $filename, string $fileType )
{
   textFieldGrp -e -text ($filename+"/"+`textFieldGrp -q -text skOutputName`+".sk") skOutputFile;
   return 1;
}


//--------------------------------------------------------------------------------
// PROC: skAddSkeletonDef
// This creates a "SkelDef" node to stire various attributes about the skeleton
//--------------------------------------------------------------------------------
proc skAddSkeletonDef()
{
   string $result = `promptDialog -title "Define New Skeleton" - message "Root Joint's Name?"
               - button "OK" -button "Cancel" -defaultButton "OK" 
               - cancelButton "Cancel" -dismissString "Cancel"`;

   if ( $result == "OK" )
   {
      $rootJointName = `promptDialog -query -text`;

      //make sure rootJointName is valid
      if ( `objExists $rootJointName` )
      {
         //valid joint entered
         group -n "SkelDef" -em -p SmartbodyExportOptions ;

         addAttr -ln "RootJoint" -dt "string" SkelDef ;
         setAttr -type "string" SkelDef.RootJoint $rootJointName;

         addAttr -ln "SkeletonName" -dt "string" SkelDef;
         setAttr -type "string" SkelDef.SkeletonName "default";

         addAttr -ln "OutputDirectory" -dt "string" SkelDef;
         setAttr -type "string" SkelDef.OutputDirectory "./default.sk";

         addAttr -ln "ShowAllChannels" -at bool SkelDef;
         setAttr SkelDef.ShowAllChannels false;

         addAttr -ln "UseLimits" -at bool SkelDef;
         setAttr SkelDef.UseLimits true;
      }
      else
      {
         //invalid joint entered
         string $errorMsg = $rootJointName + " is an invalid name for the root joint. Script has exited.\n ";
         error( $errorMsg );
      }
   }
}


global proc channelsChecked()
{
   //the show all channels box has been checked in the gui!
   setAttr SkelDef.ShowAllChannels true;
}


global proc channelsUnchecked()
{
   //the show all channels box has been unchecked in the gui!
   setAttr SkelDef.ShowAllChannels false;
}


global proc limitsChecked()
{
   //the use limits box has been checked in the gui!
   setAttr SkelDef.UseLimits true;
}


global proc limitsUnchecked()
{
   //the use limits box has been unchecked in the gui!
   setAttr SkelDef.UseLimits false;
}


//--------------------------------------------------------------------------------
// PROC: skExportWin
//--------------------------------------------------------------------------------
global proc skExportWin()
{

   source export_sk_NoGUI;


   global string $version = "0.3";

   //Creates SmartbodyExportOptions and SkelDef nodes if they don't exist
   if ( !`objExists SmartbodyExportOptions` )
   {
      //SmartbodyExportOptions needs to be created
      group -empty -name "SmartbodyExportOptions";
      setAttr "SmartbodyExportOptions.visibility" 0;
      skAddSkeletonDef();
   }
   else
   {
      if ( !`objExists SkelDef` )
      {
         //skeleton definition has not been made yet
         skAddSkeletonDef();
      }
   }

   //Build UI
   if ( ( `window -exists skMainWin` ) == true )
      deleteUI skMainWin;

   string $winTitle = "SK Exporter v" + $version + " - www.smartbody-anim.org";
   window -title $winTitle -wh 300 270 skMainWin;
   columnLayout -adjustableColumn true -columnAttach "both" 10 -rowSpacing 10 -columnWidth 290 MainColumn;
   textFieldGrp -label "Skeleton Root Joint:" -text `getAttr SkelDef.RootJoint` -cc "skRootJointChanged" skRootField;
   textFieldGrp -label "Output Character Name:" -text `getAttr SkelDef.SkeletonName` -cc "skNameChanged" skOutputName;
   textFieldGrp -label "Output File:" -text `getAttr SkelDef.OutputDirectory` -cc "skOutputDirChanged" skOutputFile;
   setParent MainColumn;
   columnLayout -columnAttach "both" 85 -columnWidth 290 - rowSpacing 5 CBRow2;
   setParent CBRow2;
   checkBox -label "Show All Channels" -value (`getAttr SkelDef.ShowAllChannels`) -onCommand "channelsChecked" -offCommand "channelsUnchecked" skShowAllChannels;
   checkBox -label "Use Limits" -value (`getAttr SkelDef.UseLimits`) -onCommand "limitsChecked" -offCommand "limitsUnchecked" skUseLimits;
   setParent MainColumn;
   button -l "Browse Output File" -command "fileBrowser(\"skFileCb\", \"Text\", \"\", 4)";
   button -l "Export" -command "skExport";
   showWindow skMainWin; 
}


//--------------------------------------------------------------------------------
// PROC: skExport
//--------------------------------------------------------------------------------
global proc skExport()
{
   global string $version;

   string $root   = `getAttr SkelDef.RootJoint`;
   string $name   = `getAttr SkelDef.SkeletonName`;
   string $file   = `getAttr SkelDef.OutputDirectory`;
   int $showAll   = `getAttr SkelDef.ShowAllChannels`;
   int $useLimits = `getAttr SkelDef.UseLimits`;

   select -r $root;
//   currentUnit -linear "cm";

   export_sk_NoGUI( $file, $name, $version, $showAll, $useLimits );
}


skExportWin;

//
// - Three steps are required in order to export a new skeleton/character from Maya:
//   1. Use this mel script to export a .sk skeleton definition file
//   2. Use the obj exporter mel script to export the used rigid models.
//      Make sure the objs are saved to the same directory of the sk file.
//   3. Finally, load the sk file in the metool.exe (the character will appear
//      with the models in strange places), and select the menu option 
//      Tools->convert skeleton. A new correct skeleton (with srm geometries) will be created.
// - All joints are exported with quaternion rotation channel
// - Only base joint is exported with translation channels
// - Maya should be set to cms
// - If "Mirror Joint" is used to create the skeleton in Maya, be sure to use the
//   "orientation" option (not "behavior")
//
