# Autogenerated by SmartBody
# -------------------- lights
print "Save Lights"

# ---- light: light0
obj = scene.getPawn("light0")
if obj == None:
	obj = scene.createPawn("light0")
obj.setPosition(SrVec(0, 1, 0))
obj.setOrientation(SrQuat(0.0025422, -0.104438, -0.994279, 0.0222666))
if obj.getAttribute("blendTexturesWithLighting") != None :
	obj.setBoolAttribute("blendTexturesWithLighting",True)
else:
	attr = obj.createBoolAttribute("blendTexturesWithLighting", True, True, "Display", 405, False, False, False, "Whether the object is visible.")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("collisionShape") != None :
	obj.setStringAttribute("collisionShape","null")
else:
	attr = obj.createStringAttribute("collisionShape",  "null", True, "Physics", 350, False, False, False, "Initializes the pawn as a physics object.")
	attr.setDefaultValue("null")
	attr.setValue("null")
	validValues = StringVec()
	validValues.append("null")
	validValues.append("sphere")
	validValues.append("box")
	validValues.append("capsule")
	attr.setValidValues(validValues)
attr = obj.createVec3Attribute("collisionShapeScale",  1, 1, 1, True, "Physics", 360, False, False, False, "Scaling of physics-based shape.")
vec = SrVec()
vec.setData(0, 1)
vec.setData(1, 1)
vec.setData(2, 1)
attr.setDefaultValue(vec)
vec1 = SrVec(1, 1, 1)
attr.setValue(vec1)
attr = obj.createVec3Attribute("color",  1, 0, 0, True, "Display", 6, False, False, False, "Object color.")
vec = SrVec()
vec.setData(0, 1)
vec.setData(1, 0)
vec.setData(2, 0)
attr.setDefaultValue(vec)
vec1 = SrVec(1, 0, 0)
attr.setValue(vec1)
attr = obj.createActionAttribute("createPhysics",  True, "Physics", 300, False, False, False, "Initializes the pawn as a physics object.")
if obj.getAttribute("enablePhysics") != None :
	obj.setBoolAttribute("enablePhysics",False)
else:
	attr = obj.createBoolAttribute("enablePhysics", False, True, "Physics", 310, False, False, False, "Enables or disables physics for this pawn.")
	attr.setDefaultValue(False)
	attr.setValue(False)
if obj.getAttribute("enabled") != None :
	obj.setBoolAttribute("enabled",True)
else:
	attr = obj.createBoolAttribute("enabled", True, True, "LightParameters", 200, False, False, False, "Is the light enabled?")
	attr.setDefaultValue(True)
	attr.setValue(True)
attr = obj.createVec3Attribute("lightAmbientColor",  0, 0, 0, True, "LightParameters", 220, False, False, False, " Ambient light color")
vec = SrVec()
vec.setData(0, 0)
vec.setData(1, 0)
vec.setData(2, 0)
attr.setDefaultValue(vec)
vec1 = SrVec(0, 0, 0)
attr.setValue(vec1)
if obj.getAttribute("lightCastShadow") != None :
	obj.setBoolAttribute("lightCastShadow",True)
else:
	attr = obj.createBoolAttribute("lightCastShadow", True, True, "LightParameters", 300, False, False, False, "Does the light cast shadow?")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("lightConstantAttenuation") != None :
	obj.setDoubleAttribute("lightConstantAttenuation",1)
else:
	attr = obj.createDoubleAttribute("lightConstantAttenuation", 1, True, "LightParameters", 270, False, False, False, "Constant attenuation")
	attr.setDefaultValue(1)
	attr.setValue(1)
attr = obj.createVec3Attribute("lightDiffuseColor",  0.5, 0.5, 0.5, True, "LightParameters", 210, False, False, False, " Diffuse light color")
vec = SrVec()
vec.setData(0, 1)
vec.setData(1, 0.95)
vec.setData(2, 0.8)
attr.setDefaultValue(vec)
vec1 = SrVec(0.5, 0.5, 0.5)
attr.setValue(vec1)
if obj.getAttribute("lightIsDirectional") != None :
	obj.setBoolAttribute("lightIsDirectional",True)
else:
	attr = obj.createBoolAttribute("lightIsDirectional", True, True, "LightParameters", 205, False, False, False, "Is the light directional?")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("lightLinearAttenuation") != None :
	obj.setDoubleAttribute("lightLinearAttenuation",1)
else:
	attr = obj.createDoubleAttribute("lightLinearAttenuation", 1, True, "LightParameters", 280, False, False, False, " Linear attenuation.")
	attr.setDefaultValue(1)
	attr.setValue(1)
if obj.getAttribute("lightQuadraticAttenuation") != None :
	obj.setDoubleAttribute("lightQuadraticAttenuation",0)
else:
	attr = obj.createDoubleAttribute("lightQuadraticAttenuation", 0, True, "LightParameters", 290, False, False, False, "Quadratic attenuation")
	attr.setDefaultValue(0)
	attr.setValue(0)
if obj.getAttribute("lightShadowMapSize") != None :
	obj.setIntAttribute("lightShadowMapSize",1024)
else:
	attr = obj.createIntAttribute("lightShadowMapSize", 1024, True, "LightParameters", 310, False, False, False, "Size of the shadow map")
	attr.setDefaultValue(1024)
	attr.setValue(1024)
attr = obj.createVec3Attribute("lightSpecularColor",  0, 0, 0, True, "LightParameters", 230, False, False, False, "Specular light color")
vec = SrVec()
vec.setData(0, 0)
vec.setData(1, 0)
vec.setData(2, 0)
attr.setDefaultValue(vec)
vec1 = SrVec(0, 0, 0)
attr.setValue(vec1)
if obj.getAttribute("lightSpotCutoff") != None :
	obj.setDoubleAttribute("lightSpotCutoff",180)
else:
	attr = obj.createDoubleAttribute("lightSpotCutoff", 180, True, "LightParameters", 260, False, False, False, "Spotlight cutoff angle")
	attr.setDefaultValue(180)
	attr.setValue(180)
attr = obj.createVec3Attribute("lightSpotDirection",  0, 0, -1, True, "LightParameters", 250, False, False, False, "Spotlight direction")
vec = SrVec()
vec.setData(0, 0)
vec.setData(1, 0)
vec.setData(2, -1)
attr.setDefaultValue(vec)
vec1 = SrVec(0, 0, -1)
attr.setValue(vec1)
if obj.getAttribute("lightSpotExponent") != None :
	obj.setDoubleAttribute("lightSpotExponent",0)
else:
	attr = obj.createDoubleAttribute("lightSpotExponent", 0, True, "LightParameters", 240, False, False, False, " Spotlight exponent.")
	attr.setDefaultValue(0)
	attr.setValue(0)
if obj.getAttribute("mesh") != None :
	obj.setStringAttribute("mesh","")
else:
	attr = obj.createStringAttribute("mesh",  "", True, "Display", 400, False, False, False, "Geometry/mesh")
	attr.setDefaultValue("")
	attr.setValue("")
	validValues = StringVec()
	attr.setValidValues(validValues)
attr = obj.createVec3Attribute("meshRotation",  0, 0, 0, True, "Display", 430, False, False, False, "Mesh rotation offset")
vec = SrVec()
vec.setData(0, 0)
vec.setData(1, 0)
vec.setData(2, 0)
attr.setDefaultValue(vec)
vec1 = SrVec(0, 0, 0)
attr.setValue(vec1)
if obj.getAttribute("meshScale") != None :
	obj.setDoubleAttribute("meshScale",1)
else:
	attr = obj.createDoubleAttribute("meshScale", 1, True, "Display", 410, False, False, False, "Scale of geometry/mesh")
	attr.setDefaultValue(1)
	attr.setValue(1)
attr = obj.createVec3Attribute("meshTranslation",  0, 0, 0, True, "Display", 420, False, False, False, "Mesh translation offset")
vec = SrVec()
vec.setData(0, 0)
vec.setData(1, 0)
vec.setData(2, 0)
attr.setDefaultValue(vec)
vec1 = SrVec(0, 0, 0)
attr.setValue(vec1)
if obj.getAttribute("posX") != None :
	obj.setDoubleAttribute("posX",0)
else:
	attr = obj.createDoubleAttribute("posX", 0, True, "transform", 10, False, False, False, "X position")
	attr.setDefaultValue(0)
	attr.setValue(0)
if obj.getAttribute("posY") != None :
	obj.setDoubleAttribute("posY",1)
else:
	attr = obj.createDoubleAttribute("posY", 1, True, "transform", 20, False, False, False, "Y position")
	attr.setDefaultValue(0)
	attr.setValue(1)
if obj.getAttribute("posZ") != None :
	obj.setDoubleAttribute("posZ",0)
else:
	attr = obj.createDoubleAttribute("posZ", 0, True, "transform", 30, False, False, False, "Z position")
	attr.setDefaultValue(0)
	attr.setValue(0)
if obj.getAttribute("rotX") != None :
	obj.setDoubleAttribute("rotX",2.50734)
else:
	attr = obj.createDoubleAttribute("rotX", 2.50734, True, "transform", 40, False, False, False, "X rotation")
	attr.setDefaultValue(0)
	attr.setValue(2.50734)
if obj.getAttribute("rotY") != None :
	obj.setDoubleAttribute("rotY",-179.443)
else:
	attr = obj.createDoubleAttribute("rotY", -179.443, True, "transform", 50, False, False, False, "Y rotation")
	attr.setDefaultValue(0)
	attr.setValue(-179.443)
if obj.getAttribute("rotZ") != None :
	obj.setDoubleAttribute("rotZ",12.0048)
else:
	attr = obj.createDoubleAttribute("rotZ", 12.0048, True, "transform", 60, False, False, False, "Z rotation")
	attr.setDefaultValue(0)
	attr.setValue(12.0048)
if obj.getAttribute("showStaticMesh") != None :
	obj.setBoolAttribute("showStaticMesh",True)
else:
	attr = obj.createBoolAttribute("showStaticMesh", True, True, "Display", 405, False, False, False, "Whether the object is visible.")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("visible") != None :
	obj.setBoolAttribute("visible",False)
else:
	attr = obj.createBoolAttribute("visible", False, True, "Display", 5, False, False, False, "Whether the object is visible.")
	attr.setDefaultValue(True)
	attr.setValue(False)

# ---- light: light1
obj = scene.getPawn("light1")
if obj == None:
	obj = scene.createPawn("light1")
obj.setPosition(SrVec(0, 1, 0))
obj.setOrientation(SrQuat(0.311536, 0.177039, 0.504919, -0.785277))
if obj.getAttribute("blendTexturesWithLighting") != None :
	obj.setBoolAttribute("blendTexturesWithLighting",True)
else:
	attr = obj.createBoolAttribute("blendTexturesWithLighting", True, True, "Display", 405, False, False, False, "Whether the object is visible.")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("collisionShape") != None :
	obj.setStringAttribute("collisionShape","null")
else:
	attr = obj.createStringAttribute("collisionShape",  "null", True, "Physics", 350, False, False, False, "Initializes the pawn as a physics object.")
	attr.setDefaultValue("null")
	attr.setValue("null")
	validValues = StringVec()
	validValues.append("null")
	validValues.append("sphere")
	validValues.append("box")
	validValues.append("capsule")
	attr.setValidValues(validValues)
attr = obj.createVec3Attribute("collisionShapeScale",  1, 1, 1, True, "Physics", 360, False, False, False, "Scaling of physics-based shape.")
vec = SrVec()
vec.setData(0, 1)
vec.setData(1, 1)
vec.setData(2, 1)
attr.setDefaultValue(vec)
vec1 = SrVec(1, 1, 1)
attr.setValue(vec1)
attr = obj.createVec3Attribute("color",  1, 0, 0, True, "Display", 6, False, False, False, "Object color.")
vec = SrVec()
vec.setData(0, 1)
vec.setData(1, 0)
vec.setData(2, 0)
attr.setDefaultValue(vec)
vec1 = SrVec(1, 0, 0)
attr.setValue(vec1)
attr = obj.createActionAttribute("createPhysics",  True, "Physics", 300, False, False, False, "Initializes the pawn as a physics object.")
if obj.getAttribute("enablePhysics") != None :
	obj.setBoolAttribute("enablePhysics",False)
else:
	attr = obj.createBoolAttribute("enablePhysics", False, True, "Physics", 310, False, False, False, "Enables or disables physics for this pawn.")
	attr.setDefaultValue(False)
	attr.setValue(False)
if obj.getAttribute("enabled") != None :
	obj.setBoolAttribute("enabled",True)
else:
	attr = obj.createBoolAttribute("enabled", True, True, "LightParameters", 200, False, False, False, "Is the light enabled?")
	attr.setDefaultValue(True)
	attr.setValue(True)
attr = obj.createVec3Attribute("lightAmbientColor",  0, 0, 0, True, "LightParameters", 220, False, False, False, " Ambient light color")
vec = SrVec()
vec.setData(0, 0)
vec.setData(1, 0)
vec.setData(2, 0)
attr.setDefaultValue(vec)
vec1 = SrVec(0, 0, 0)
attr.setValue(vec1)
if obj.getAttribute("lightCastShadow") != None :
	obj.setBoolAttribute("lightCastShadow",True)
else:
	attr = obj.createBoolAttribute("lightCastShadow", True, True, "LightParameters", 300, False, False, False, "Does the light cast shadow?")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("lightConstantAttenuation") != None :
	obj.setDoubleAttribute("lightConstantAttenuation",1)
else:
	attr = obj.createDoubleAttribute("lightConstantAttenuation", 1, True, "LightParameters", 270, False, False, False, "Constant attenuation")
	attr.setDefaultValue(1)
	attr.setValue(1)
attr = obj.createVec3Attribute("lightDiffuseColor",  1, 1, 1, True, "LightParameters", 210, False, False, False, " Diffuse light color")
vec = SrVec()
vec.setData(0, 1)
vec.setData(1, 0.95)
vec.setData(2, 0.8)
attr.setDefaultValue(vec)
vec1 = SrVec(1, 1, 1)
attr.setValue(vec1)
if obj.getAttribute("lightIsDirectional") != None :
	obj.setBoolAttribute("lightIsDirectional",True)
else:
	attr = obj.createBoolAttribute("lightIsDirectional", True, True, "LightParameters", 205, False, False, False, "Is the light directional?")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("lightLinearAttenuation") != None :
	obj.setDoubleAttribute("lightLinearAttenuation",1)
else:
	attr = obj.createDoubleAttribute("lightLinearAttenuation", 1, True, "LightParameters", 280, False, False, False, " Linear attenuation.")
	attr.setDefaultValue(1)
	attr.setValue(1)
if obj.getAttribute("lightQuadraticAttenuation") != None :
	obj.setDoubleAttribute("lightQuadraticAttenuation",0)
else:
	attr = obj.createDoubleAttribute("lightQuadraticAttenuation", 0, True, "LightParameters", 290, False, False, False, "Quadratic attenuation")
	attr.setDefaultValue(0)
	attr.setValue(0)
if obj.getAttribute("lightShadowMapSize") != None :
	obj.setIntAttribute("lightShadowMapSize",1024)
else:
	attr = obj.createIntAttribute("lightShadowMapSize", 1024, True, "LightParameters", 310, False, False, False, "Size of the shadow map")
	attr.setDefaultValue(1024)
	attr.setValue(1024)
attr = obj.createVec3Attribute("lightSpecularColor",  0, 0, 0, True, "LightParameters", 230, False, False, False, "Specular light color")
vec = SrVec()
vec.setData(0, 0)
vec.setData(1, 0)
vec.setData(2, 0)
attr.setDefaultValue(vec)
vec1 = SrVec(0, 0, 0)
attr.setValue(vec1)
if obj.getAttribute("lightSpotCutoff") != None :
	obj.setDoubleAttribute("lightSpotCutoff",180)
else:
	attr = obj.createDoubleAttribute("lightSpotCutoff", 180, True, "LightParameters", 260, False, False, False, "Spotlight cutoff angle")
	attr.setDefaultValue(180)
	attr.setValue(180)
attr = obj.createVec3Attribute("lightSpotDirection",  0, 0, -1, True, "LightParameters", 250, False, False, False, "Spotlight direction")
vec = SrVec()
vec.setData(0, 0)
vec.setData(1, 0)
vec.setData(2, -1)
attr.setDefaultValue(vec)
vec1 = SrVec(0, 0, -1)
attr.setValue(vec1)
if obj.getAttribute("lightSpotExponent") != None :
	obj.setDoubleAttribute("lightSpotExponent",0)
else:
	attr = obj.createDoubleAttribute("lightSpotExponent", 0, True, "LightParameters", 240, False, False, False, " Spotlight exponent.")
	attr.setDefaultValue(0)
	attr.setValue(0)
if obj.getAttribute("mesh") != None :
	obj.setStringAttribute("mesh","")
else:
	attr = obj.createStringAttribute("mesh",  "", True, "Display", 400, False, False, False, "Geometry/mesh")
	attr.setDefaultValue("")
	attr.setValue("")
	validValues = StringVec()
	attr.setValidValues(validValues)
attr = obj.createVec3Attribute("meshRotation",  0, 0, 0, True, "Display", 430, False, False, False, "Mesh rotation offset")
vec = SrVec()
vec.setData(0, 0)
vec.setData(1, 0)
vec.setData(2, 0)
attr.setDefaultValue(vec)
vec1 = SrVec(0, 0, 0)
attr.setValue(vec1)
if obj.getAttribute("meshScale") != None :
	obj.setDoubleAttribute("meshScale",1)
else:
	attr = obj.createDoubleAttribute("meshScale", 1, True, "Display", 410, False, False, False, "Scale of geometry/mesh")
	attr.setDefaultValue(1)
	attr.setValue(1)
attr = obj.createVec3Attribute("meshTranslation",  0, 0, 0, True, "Display", 420, False, False, False, "Mesh translation offset")
vec = SrVec()
vec.setData(0, 0)
vec.setData(1, 0)
vec.setData(2, 0)
attr.setDefaultValue(vec)
vec1 = SrVec(0, 0, 0)
attr.setValue(vec1)
if obj.getAttribute("posX") != None :
	obj.setDoubleAttribute("posX",0)
else:
	attr = obj.createDoubleAttribute("posX", 0, True, "transform", 10, False, False, False, "X position")
	attr.setDefaultValue(0)
	attr.setValue(0)
if obj.getAttribute("posY") != None :
	obj.setDoubleAttribute("posY",1)
else:
	attr = obj.createDoubleAttribute("posY", 1, True, "transform", 20, False, False, False, "Y position")
	attr.setDefaultValue(0)
	attr.setValue(1)
if obj.getAttribute("posZ") != None :
	obj.setDoubleAttribute("posZ",0)
else:
	attr = obj.createDoubleAttribute("posZ", 0, True, "transform", 30, False, False, False, "Z position")
	attr.setDefaultValue(0)
	attr.setValue(0)
if obj.getAttribute("rotX") != None :
	obj.setDoubleAttribute("rotX",64.5966)
else:
	attr = obj.createDoubleAttribute("rotX", 64.5966, True, "transform", 40, False, False, False, "X rotation")
	attr.setDefaultValue(0)
	attr.setValue(64.5966)
if obj.getAttribute("rotY") != None :
	obj.setDoubleAttribute("rotY",4.88783)
else:
	attr = obj.createDoubleAttribute("rotY", 4.88783, True, "transform", 50, False, False, False, "Y rotation")
	attr.setDefaultValue(0)
	attr.setValue(4.88783)
if obj.getAttribute("rotZ") != None :
	obj.setDoubleAttribute("rotZ",-133.63)
else:
	attr = obj.createDoubleAttribute("rotZ", -133.63, True, "transform", 60, False, False, False, "Z rotation")
	attr.setDefaultValue(0)
	attr.setValue(-133.63)
if obj.getAttribute("showStaticMesh") != None :
	obj.setBoolAttribute("showStaticMesh",True)
else:
	attr = obj.createBoolAttribute("showStaticMesh", True, True, "Display", 405, False, False, False, "Whether the object is visible.")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("visible") != None :
	obj.setBoolAttribute("visible",False)
else:
	attr = obj.createBoolAttribute("visible", False, True, "Display", 5, False, False, False, "Whether the object is visible.")
	attr.setDefaultValue(True)
	attr.setValue(False)

# ---- light: light2
obj = scene.getPawn("light2")
if obj == None:
	obj = scene.createPawn("light2")
obj.setPosition(SrVec(0, 1, 0))
obj.setOrientation(SrQuat(0.378657, 0.293906, -0.627432, 0.613651))
if obj.getAttribute("blendTexturesWithLighting") != None :
	obj.setBoolAttribute("blendTexturesWithLighting",True)
else:
	attr = obj.createBoolAttribute("blendTexturesWithLighting", True, True, "Display", 405, False, False, False, "Whether the object is visible.")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("collisionShape") != None :
	obj.setStringAttribute("collisionShape","null")
else:
	attr = obj.createStringAttribute("collisionShape",  "null", True, "Physics", 350, False, False, False, "Initializes the pawn as a physics object.")
	attr.setDefaultValue("null")
	attr.setValue("null")
	validValues = StringVec()
	validValues.append("null")
	validValues.append("sphere")
	validValues.append("box")
	validValues.append("capsule")
	attr.setValidValues(validValues)
attr = obj.createVec3Attribute("collisionShapeScale",  1, 1, 1, True, "Physics", 360, False, False, False, "Scaling of physics-based shape.")
vec = SrVec()
vec.setData(0, 1)
vec.setData(1, 1)
vec.setData(2, 1)
attr.setDefaultValue(vec)
vec1 = SrVec(1, 1, 1)
attr.setValue(vec1)
attr = obj.createVec3Attribute("color",  1, 0, 0, True, "Display", 6, False, False, False, "Object color.")
vec = SrVec()
vec.setData(0, 1)
vec.setData(1, 0)
vec.setData(2, 0)
attr.setDefaultValue(vec)
vec1 = SrVec(1, 0, 0)
attr.setValue(vec1)
attr = obj.createActionAttribute("createPhysics",  True, "Physics", 300, False, False, False, "Initializes the pawn as a physics object.")
if obj.getAttribute("enablePhysics") != None :
	obj.setBoolAttribute("enablePhysics",False)
else:
	attr = obj.createBoolAttribute("enablePhysics", False, True, "Physics", 310, False, False, False, "Enables or disables physics for this pawn.")
	attr.setDefaultValue(False)
	attr.setValue(False)
if obj.getAttribute("enabled") != None :
	obj.setBoolAttribute("enabled",True)
else:
	attr = obj.createBoolAttribute("enabled", True, True, "LightParameters", 200, False, False, False, "Is the light enabled?")
	attr.setDefaultValue(True)
	attr.setValue(True)
attr = obj.createVec3Attribute("lightAmbientColor",  0, 0, 0, True, "LightParameters", 220, False, False, False, " Ambient light color")
vec = SrVec()
vec.setData(0, 0)
vec.setData(1, 0)
vec.setData(2, 0)
attr.setDefaultValue(vec)
vec1 = SrVec(0, 0, 0)
attr.setValue(vec1)
if obj.getAttribute("lightCastShadow") != None :
	obj.setBoolAttribute("lightCastShadow",True)
else:
	attr = obj.createBoolAttribute("lightCastShadow", True, True, "LightParameters", 300, False, False, False, "Does the light cast shadow?")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("lightConstantAttenuation") != None :
	obj.setDoubleAttribute("lightConstantAttenuation",1)
else:
	attr = obj.createDoubleAttribute("lightConstantAttenuation", 1, True, "LightParameters", 270, False, False, False, "Constant attenuation")
	attr.setDefaultValue(1)
	attr.setValue(1)
attr = obj.createVec3Attribute("lightDiffuseColor",  1, 1, 1, True, "LightParameters", 210, False, False, False, " Diffuse light color")
vec = SrVec()
vec.setData(0, 1)
vec.setData(1, 0.95)
vec.setData(2, 0.8)
attr.setDefaultValue(vec)
vec1 = SrVec(1, 1, 1)
attr.setValue(vec1)
if obj.getAttribute("lightIsDirectional") != None :
	obj.setBoolAttribute("lightIsDirectional",True)
else:
	attr = obj.createBoolAttribute("lightIsDirectional", True, True, "LightParameters", 205, False, False, False, "Is the light directional?")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("lightLinearAttenuation") != None :
	obj.setDoubleAttribute("lightLinearAttenuation",1)
else:
	attr = obj.createDoubleAttribute("lightLinearAttenuation", 1, True, "LightParameters", 280, False, False, False, " Linear attenuation.")
	attr.setDefaultValue(1)
	attr.setValue(1)
if obj.getAttribute("lightQuadraticAttenuation") != None :
	obj.setDoubleAttribute("lightQuadraticAttenuation",0)
else:
	attr = obj.createDoubleAttribute("lightQuadraticAttenuation", 0, True, "LightParameters", 290, False, False, False, "Quadratic attenuation")
	attr.setDefaultValue(0)
	attr.setValue(0)
if obj.getAttribute("lightShadowMapSize") != None :
	obj.setIntAttribute("lightShadowMapSize",1024)
else:
	attr = obj.createIntAttribute("lightShadowMapSize", 1024, True, "LightParameters", 310, False, False, False, "Size of the shadow map")
	attr.setDefaultValue(1024)
	attr.setValue(1024)
attr = obj.createVec3Attribute("lightSpecularColor",  0, 0, 0, True, "LightParameters", 230, False, False, False, "Specular light color")
vec = SrVec()
vec.setData(0, 0)
vec.setData(1, 0)
vec.setData(2, 0)
attr.setDefaultValue(vec)
vec1 = SrVec(0, 0, 0)
attr.setValue(vec1)
if obj.getAttribute("lightSpotCutoff") != None :
	obj.setDoubleAttribute("lightSpotCutoff",180)
else:
	attr = obj.createDoubleAttribute("lightSpotCutoff", 180, True, "LightParameters", 260, False, False, False, "Spotlight cutoff angle")
	attr.setDefaultValue(180)
	attr.setValue(180)
attr = obj.createVec3Attribute("lightSpotDirection",  0, 0, -1, True, "LightParameters", 250, False, False, False, "Spotlight direction")
vec = SrVec()
vec.setData(0, 0)
vec.setData(1, 0)
vec.setData(2, -1)
attr.setDefaultValue(vec)
vec1 = SrVec(0, 0, -1)
attr.setValue(vec1)
if obj.getAttribute("lightSpotExponent") != None :
	obj.setDoubleAttribute("lightSpotExponent",0)
else:
	attr = obj.createDoubleAttribute("lightSpotExponent", 0, True, "LightParameters", 240, False, False, False, " Spotlight exponent.")
	attr.setDefaultValue(0)
	attr.setValue(0)
if obj.getAttribute("mesh") != None :
	obj.setStringAttribute("mesh","")
else:
	attr = obj.createStringAttribute("mesh",  "", True, "Display", 400, False, False, False, "Geometry/mesh")
	attr.setDefaultValue("")
	attr.setValue("")
	validValues = StringVec()
	attr.setValidValues(validValues)
attr = obj.createVec3Attribute("meshRotation",  0, 0, 0, True, "Display", 430, False, False, False, "Mesh rotation offset")
vec = SrVec()
vec.setData(0, 0)
vec.setData(1, 0)
vec.setData(2, 0)
attr.setDefaultValue(vec)
vec1 = SrVec(0, 0, 0)
attr.setValue(vec1)
if obj.getAttribute("meshScale") != None :
	obj.setDoubleAttribute("meshScale",1)
else:
	attr = obj.createDoubleAttribute("meshScale", 1, True, "Display", 410, False, False, False, "Scale of geometry/mesh")
	attr.setDefaultValue(1)
	attr.setValue(1)
attr = obj.createVec3Attribute("meshTranslation",  0, 0, 0, True, "Display", 420, False, False, False, "Mesh translation offset")
vec = SrVec()
vec.setData(0, 0)
vec.setData(1, 0)
vec.setData(2, 0)
attr.setDefaultValue(vec)
vec1 = SrVec(0, 0, 0)
attr.setValue(vec1)
if obj.getAttribute("posX") != None :
	obj.setDoubleAttribute("posX",0)
else:
	attr = obj.createDoubleAttribute("posX", 0, True, "transform", 10, False, False, False, "X position")
	attr.setDefaultValue(0)
	attr.setValue(0)
if obj.getAttribute("posY") != None :
	obj.setDoubleAttribute("posY",1)
else:
	attr = obj.createDoubleAttribute("posY", 1, True, "transform", 20, False, False, False, "Y position")
	attr.setDefaultValue(0)
	attr.setValue(1)
if obj.getAttribute("posZ") != None :
	obj.setDoubleAttribute("posZ",0)
else:
	attr = obj.createDoubleAttribute("posZ", 0, True, "transform", 30, False, False, False, "Z position")
	attr.setDefaultValue(0)
	attr.setValue(0)
if obj.getAttribute("rotX") != None :
	obj.setDoubleAttribute("rotX",83.0383)
else:
	attr = obj.createDoubleAttribute("rotX", 83.0383, True, "transform", 40, False, False, False, "X rotation")
	attr.setDefaultValue(0)
	attr.setValue(83.0383)
if obj.getAttribute("rotY") != None :
	obj.setDoubleAttribute("rotY",-70.7822)
else:
	attr = obj.createDoubleAttribute("rotY", -70.7822, True, "transform", 50, False, False, False, "Y rotation")
	attr.setDefaultValue(0)
	attr.setValue(-70.7822)
if obj.getAttribute("rotZ") != None :
	obj.setDoubleAttribute("rotZ",52.3099)
else:
	attr = obj.createDoubleAttribute("rotZ", 52.3099, True, "transform", 60, False, False, False, "Z rotation")
	attr.setDefaultValue(0)
	attr.setValue(52.3099)
if obj.getAttribute("showStaticMesh") != None :
	obj.setBoolAttribute("showStaticMesh",True)
else:
	attr = obj.createBoolAttribute("showStaticMesh", True, True, "Display", 405, False, False, False, "Whether the object is visible.")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("visible") != None :
	obj.setBoolAttribute("visible",False)
else:
	attr = obj.createBoolAttribute("visible", False, True, "Display", 5, False, False, False, "Whether the object is visible.")
	attr.setDefaultValue(True)
	attr.setValue(False)

# ---- light: light3
obj = scene.getPawn("light3")
if obj == None:
	obj = scene.createPawn("light3")
obj.setPosition(SrVec(0.513998, 1.28332, 0.407648))
obj.setOrientation(SrQuat(-0.104275, 0.578428, -0.430908, -0.684738))
if obj.getAttribute("blendTexturesWithLighting") != None :
	obj.setBoolAttribute("blendTexturesWithLighting",True)
else:
	attr = obj.createBoolAttribute("blendTexturesWithLighting", True, True, "Display", 405, False, False, False, "Whether the object is visible.")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("collisionShape") != None :
	obj.setStringAttribute("collisionShape","null")
else:
	attr = obj.createStringAttribute("collisionShape",  "null", True, "Physics", 350, False, False, False, "Initializes the pawn as a physics object.")
	attr.setDefaultValue("null")
	attr.setValue("null")
	validValues = StringVec()
	validValues.append("null")
	validValues.append("sphere")
	validValues.append("box")
	validValues.append("capsule")
	attr.setValidValues(validValues)
attr = obj.createVec3Attribute("collisionShapeScale",  1, 1, 1, True, "Physics", 360, False, False, False, "Scaling of physics-based shape.")
vec = SrVec()
vec.setData(0, 1)
vec.setData(1, 1)
vec.setData(2, 1)
attr.setDefaultValue(vec)
vec1 = SrVec(1, 1, 1)
attr.setValue(vec1)
attr = obj.createVec3Attribute("color",  1, 0, 0, True, "Display", 6, False, False, False, "Object color.")
vec = SrVec()
vec.setData(0, 1)
vec.setData(1, 0)
vec.setData(2, 0)
attr.setDefaultValue(vec)
vec1 = SrVec(1, 0, 0)
attr.setValue(vec1)
attr = obj.createActionAttribute("createPhysics",  True, "Physics", 300, False, False, False, "Initializes the pawn as a physics object.")
if obj.getAttribute("enablePhysics") != None :
	obj.setBoolAttribute("enablePhysics",False)
else:
	attr = obj.createBoolAttribute("enablePhysics", False, True, "Physics", 310, False, False, False, "Enables or disables physics for this pawn.")
	attr.setDefaultValue(False)
	attr.setValue(False)
if obj.getAttribute("enabled") != None :
	obj.setBoolAttribute("enabled",True)
else:
	attr = obj.createBoolAttribute("enabled", True, True, "LightParameters", 200, False, False, False, "Is the light enabled?")
	attr.setDefaultValue(True)
	attr.setValue(True)
attr = obj.createVec3Attribute("lightAmbientColor",  0, 0, 0, True, "LightParameters", 220, False, False, False, " Ambient light color")
vec = SrVec()
vec.setData(0, 0)
vec.setData(1, 0)
vec.setData(2, 0)
attr.setDefaultValue(vec)
vec1 = SrVec(0, 0, 0)
attr.setValue(vec1)
if obj.getAttribute("lightCastShadow") != None :
	obj.setBoolAttribute("lightCastShadow",True)
else:
	attr = obj.createBoolAttribute("lightCastShadow", True, True, "LightParameters", 300, False, False, False, "Does the light cast shadow?")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("lightConstantAttenuation") != None :
	obj.setDoubleAttribute("lightConstantAttenuation",1)
else:
	attr = obj.createDoubleAttribute("lightConstantAttenuation", 1, True, "LightParameters", 270, False, False, False, "Constant attenuation")
	attr.setDefaultValue(1)
	attr.setValue(1)
attr = obj.createVec3Attribute("lightDiffuseColor",  1, 1, 1, True, "LightParameters", 210, False, False, False, " Diffuse light color")
vec = SrVec()
vec.setData(0, 1)
vec.setData(1, 0.95)
vec.setData(2, 0.8)
attr.setDefaultValue(vec)
vec1 = SrVec(1, 1, 1)
attr.setValue(vec1)
if obj.getAttribute("lightIsDirectional") != None :
	obj.setBoolAttribute("lightIsDirectional",True)
else:
	attr = obj.createBoolAttribute("lightIsDirectional", True, True, "LightParameters", 205, False, False, False, "Is the light directional?")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("lightLinearAttenuation") != None :
	obj.setDoubleAttribute("lightLinearAttenuation",1)
else:
	attr = obj.createDoubleAttribute("lightLinearAttenuation", 1, True, "LightParameters", 280, False, False, False, " Linear attenuation.")
	attr.setDefaultValue(1)
	attr.setValue(1)
if obj.getAttribute("lightQuadraticAttenuation") != None :
	obj.setDoubleAttribute("lightQuadraticAttenuation",0)
else:
	attr = obj.createDoubleAttribute("lightQuadraticAttenuation", 0, True, "LightParameters", 290, False, False, False, "Quadratic attenuation")
	attr.setDefaultValue(0)
	attr.setValue(0)
if obj.getAttribute("lightShadowMapSize") != None :
	obj.setIntAttribute("lightShadowMapSize",1024)
else:
	attr = obj.createIntAttribute("lightShadowMapSize", 1024, True, "LightParameters", 310, False, False, False, "Size of the shadow map")
	attr.setDefaultValue(1024)
	attr.setValue(1024)
attr = obj.createVec3Attribute("lightSpecularColor",  0, 0, 0, True, "LightParameters", 230, False, False, False, "Specular light color")
vec = SrVec()
vec.setData(0, 0)
vec.setData(1, 0)
vec.setData(2, 0)
attr.setDefaultValue(vec)
vec1 = SrVec(0, 0, 0)
attr.setValue(vec1)
if obj.getAttribute("lightSpotCutoff") != None :
	obj.setDoubleAttribute("lightSpotCutoff",180)
else:
	attr = obj.createDoubleAttribute("lightSpotCutoff", 180, True, "LightParameters", 260, False, False, False, "Spotlight cutoff angle")
	attr.setDefaultValue(180)
	attr.setValue(180)
attr = obj.createVec3Attribute("lightSpotDirection",  0, 0, -1, True, "LightParameters", 250, False, False, False, "Spotlight direction")
vec = SrVec()
vec.setData(0, 0)
vec.setData(1, 0)
vec.setData(2, -1)
attr.setDefaultValue(vec)
vec1 = SrVec(0, 0, -1)
attr.setValue(vec1)
if obj.getAttribute("lightSpotExponent") != None :
	obj.setDoubleAttribute("lightSpotExponent",0)
else:
	attr = obj.createDoubleAttribute("lightSpotExponent", 0, True, "LightParameters", 240, False, False, False, " Spotlight exponent.")
	attr.setDefaultValue(0)
	attr.setValue(0)
if obj.getAttribute("mesh") != None :
	obj.setStringAttribute("mesh","")
else:
	attr = obj.createStringAttribute("mesh",  "", True, "Display", 400, False, False, False, "Geometry/mesh")
	attr.setDefaultValue("")
	attr.setValue("")
	validValues = StringVec()
	attr.setValidValues(validValues)
attr = obj.createVec3Attribute("meshRotation",  0, 0, 0, True, "Display", 430, False, False, False, "Mesh rotation offset")
vec = SrVec()
vec.setData(0, 0)
vec.setData(1, 0)
vec.setData(2, 0)
attr.setDefaultValue(vec)
vec1 = SrVec(0, 0, 0)
attr.setValue(vec1)
if obj.getAttribute("meshScale") != None :
	obj.setDoubleAttribute("meshScale",1)
else:
	attr = obj.createDoubleAttribute("meshScale", 1, True, "Display", 410, False, False, False, "Scale of geometry/mesh")
	attr.setDefaultValue(1)
	attr.setValue(1)
attr = obj.createVec3Attribute("meshTranslation",  0, 0, 0, True, "Display", 420, False, False, False, "Mesh translation offset")
vec = SrVec()
vec.setData(0, 0)
vec.setData(1, 0)
vec.setData(2, 0)
attr.setDefaultValue(vec)
vec1 = SrVec(0, 0, 0)
attr.setValue(vec1)
if obj.getAttribute("posX") != None :
	obj.setDoubleAttribute("posX",0.513998)
else:
	attr = obj.createDoubleAttribute("posX", 0.513998, True, "transform", 10, False, False, False, "X position")
	attr.setDefaultValue(0)
	attr.setValue(0.513998)
if obj.getAttribute("posY") != None :
	obj.setDoubleAttribute("posY",1.28332)
else:
	attr = obj.createDoubleAttribute("posY", 1.28332, True, "transform", 20, False, False, False, "Y position")
	attr.setDefaultValue(0)
	attr.setValue(1.28332)
if obj.getAttribute("posZ") != None :
	obj.setDoubleAttribute("posZ",0.407648)
else:
	attr = obj.createDoubleAttribute("posZ", 0.407648, True, "transform", 30, False, False, False, "Z position")
	attr.setDefaultValue(0)
	attr.setValue(0.407648)
if obj.getAttribute("rotX") != None :
	obj.setDoubleAttribute("rotX",-45.2959)
else:
	attr = obj.createDoubleAttribute("rotX", -45.2959, True, "transform", 40, False, False, False, "X rotation")
	attr.setDefaultValue(0)
	attr.setValue(-45.2959)
if obj.getAttribute("rotY") != None :
	obj.setDoubleAttribute("rotY",-93.3023)
else:
	attr = obj.createDoubleAttribute("rotY", -93.3023, True, "transform", 50, False, False, False, "Y rotation")
	attr.setDefaultValue(0)
	attr.setValue(-93.3023)
if obj.getAttribute("rotZ") != None :
	obj.setDoubleAttribute("rotZ",-149.626)
else:
	attr = obj.createDoubleAttribute("rotZ", -149.626, True, "transform", 60, False, False, False, "Z rotation")
	attr.setDefaultValue(0)
	attr.setValue(-149.626)
if obj.getAttribute("showStaticMesh") != None :
	obj.setBoolAttribute("showStaticMesh",True)
else:
	attr = obj.createBoolAttribute("showStaticMesh", True, True, "Display", 405, False, False, False, "Whether the object is visible.")
	attr.setDefaultValue(True)
	attr.setValue(True)
if obj.getAttribute("visible") != None :
	obj.setBoolAttribute("visible",False)
else:
	attr = obj.createBoolAttribute("visible", False, True, "Display", 5, False, False, False, "Whether the object is visible.")
	attr.setDefaultValue(True)
	attr.setValue(False)
