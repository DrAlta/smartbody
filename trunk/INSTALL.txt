To install SmartBody on linux, you need to have the following packages installed:

subversion
cmake
g++
liblog4cxx10-dev
libxerces-c3-dev
libgl1-mesa-dev
libglu1-mesa-dev
libglut-mesa-dev
xutils-dev
libxi-dev
freeglut3-dev 
libglut3
libglew-dev
libxft-dev
libapr1-dev
libaprutil1-dev
libcppunit-dev
liblapack-dev
libblas-dev
build-essential
mono-devel
mono-xbuild
python-dev

To install the Festival text-to-speech engine, you need:

festival-dev

To run the test suite, you need:

imagemagick



Instructions
-------------
Get boost-1.44 from:
http://sourceforge.net/projects/boost/files/boost/1.44.0/boost_1_44_0.tar.gz/download
Place in lib/ and unpack and build using:
./boostrap.sh
./bjam --with-python
./bjam install <-- installed to /usr/local, need sudo or root access

Download the boost numeric bindings from:
http://mathema.tician.de/news.tiker.net/download/software/boost-numeric-bindings/boost-numeric-bindings-20081116.tar.gz
Place in lib/ and unpack using:
tar -xvzf boost-numeric-bindings-20081116.tar.gz
cd boost-numeric-bindings
sudo cp -R boost/numeric/bindings /usr/local/include/boost/numeric


Get FLTK 1.3 from:
http://ftp.easysw.com/pub/fltk/1.3.0/fltk-1.3.0-source.tar.gz
Place in lib/, unpack and configure:
./configure --enable-gl
Or:
./configure --enable-gl --disable-xinerama
make
sudo make install  <-- installed to /usr/local, need sudo or root access

Get ActiveMQ from:
http://www.apache.org/dyn/closer.cgi/activemq/activemq-cpp/source/activemq-cpp-library-3.4.0-src.tar.gz
- unpack to temp folder
- ./configure --disable-ssl
- make
- sudo make install <-- installed to /usr/local, need sudo or root access
- (sudo ldconfig as needed) <-- installed to /usr/local, need sudo or root access

Get Open Dynamics Engine (ODE) ode-0.11.1 from:
http://sourceforge.net/projects/opende/files/
Place in lib/, unpack and configure:
Configure ODE like this:
./configure --with-drawstuff=none
64bit:
./configure --with-drawstuff=none --with-pic
make
sudo make install  <-- installed to /usr/local, need sudo or root access


===

- cd sbm/lib/elsender
- xbuild elsender.csproj   (ignore post-build error)
- cd bin/Debug
- mono elsender.exe

(make sure your VHMSG_SERVER env is set before running)

Instructions for MacOS
----------------------
Get boost-1.44 from:
http://sourceforge.net/projects/boost/files/boost/1.44.0/boost_1_44_0.tar.gz/download
Place in lib/ and unpack and build using:
./boostrap.sh
./bjam
./bjam install <-- installed to /usr/local, need sudo or root access

Download the boost numeric bindings from:
http://mathema.tician.de/news.tiker.net/download/software/boost-numeric-bindings/boost-numeric-bindings-20081116.tar.gz
Place in lib/ and unpack using:
tar -xvzf boost-numeric-bindings-20081116.tar.gz
cd boost-numeric-bindings
sudo cp -R boost/numeric/bindings /usr/local/include/boost/numeric


Get FLTK 1.3 from:
http://ftp.easysw.com/pub/fltk/1.3.0/fltk-1.3.0-source.tar.gz
Place in lib/, unpack and configure:
./configure --enable-gl --enable-shared
Or:
./configure --enable-gl --enable-shared --disable-xinerama
make
sudo make install  <-- installed to /usr/local, need sudo or root access


Get Activemq-cpp 3.4 from:
http://www.apache.org/dyn/closer.cgi/activemq/activemq-cpp/source/activemq-cpp-library-3.4.0-src.tar.gz
Activemq-cpp will need to be changed slightly to work with OsX, as seen in this bug fix:

	https://issues.apache.org/jira/browse/AMQCPP-369

Change the following in the activemq-cpp source code:
Here are the two patches:

--- activemq/activemq-cpp/trunk/activemq-cpp/src/main/decaf/util/logging/Handler.h	2011/05/02 14:52:26	1098605
+++ activemq/activemq-cpp/trunk/activemq-cpp/src/main/decaf/util/logging/Handler.h	2011/05/02 14:52:30	1098606
@@ -49,9 +49,6 @@
     class DECAF_API Handler : public io::Closeable {
     private:
 
-        // Default Logging Level for Handler
-        static const Level DEFAULT_LEVEL;
-
         // Formats this Handlers output
         Formatter* formatter;
		 
--- activemq/activemq-cpp/trunk/activemq-cpp/src/main/decaf/util/logging/Handler.cpp	2011/05/02 14:52:26	1098605
+++ activemq/activemq-cpp/trunk/activemq-cpp/src/main/decaf/util/logging/Handler.cpp	2011/05/02 14:52:30	1098606
@@ -28,11 +28,8 @@
using namespace decaf::util::logging;
		   
////////////////////////////////////////////////////////////////////////////////
-const Level Handler::DEFAULT_LEVEL = Level::ALL;
-
-////////////////////////////////////////////////////////////////////////////////
Handler::Handler() : formatter(NULL), filter(NULL), errorManager(new ErrorManager()),
-                     level(DEFAULT_LEVEL), prefix("Handler") {
+                     level(Level::ALL), prefix("Handler") {
}
		 
 
Then rebuild activemq-cpp using:
- ./configure --disable-ssl
- make
- sudo make install
- (sudo ldconfig as needed)

Get Open Dynamics Engine (ODE) ode-0.11.1 from:
http://sourceforge.net/projects/opende/files/
Place in lib/, unpack and configure:
Configure ODE like this:
./configure --with-drawstuff=none
64bit:
./configure --with-drawstuff=none --with-pic
make
sudo make install  <-- installed to /usr/local, need sudo or root access

You will need the following packages built and installed:

Xerces
http://www.takeyellow.com/apachemirror//xerces/c/3/sources/xerces-c-3.1.1.tar.gz

GLEW
https://sourceforge.net/projects/glew/files/glew/1.6.0/glew-1.6.0.tgz/download

log4cxx
http://www.apache.org/dyn/closer.cgi/logging/log4cxx/0.10.0/apache-log4cxx-0.10.0.tar.gz


Instructions for Android
----------------------

Download and install android-sdk, android-ndk from : http://developer.android.com/sdk/index.html

(For windows platform, you also need to install cygwin 1.7 or higher : http://www.cygwin.com/ )

Follow the installation instruction for both sdk/ndk. Be sure to set the correct path to android-sdk/bin, android-ndk/bin so the toolchain can be access correctly.

For NDK, you also need to export the environment variable NDK_ROOT to the NDK installation directory ( for example, export NDK_ROOT= "path-to-ndk-directory" )

Install Eclipse ( http://www.eclipse.org/ ) and its Android ADT plug-in ( http://developer.android.com/sdk/eclipse-adt.html )

The Android build target needs to be 2.3.3 or higher, otherwise some of the code may not be built.

**** If your target hardware is the Arm architecture, some dependency libraries are already prebuilt at SmartBodyDir)/android/lib. Therefore you can build the smartbody project directly : 

1. Go to (SmartBodyDir)/android/sbm/
2. ndk-build  ( Similar to gcc, you can set the option -j $number_threads to accelerate the build process with multi-threading).
3. Use Eclipse to open the project (SmartBodyDir)/android/sbm/. 
4. Select Project->Build Project. This should generate a SbmAndroid.apk in (SmartBodyDir)/android/sbm/bin


**** If you are targeting other hardware achitecture ( X86, etc ) or you prefer to rebuild all libraries from the source :

1. Building boost :
i) Download Boost library, extract it into $(SmartBodyDir)/lib/

modify libs\filesystem\v2\src\v2_operations.cpp, change: 
#   if !defined(__APPLE__) && !defined(__OpenBSD__) 
#     include <sys/statvfs.h> 
#     define BOOST_STATVFS statvfs 
#     define BOOST_STATVFS_F_FRSIZE vfs.f_frsize 
#   else 
#ifdef __OpenBSD__ 
#     include <sys/param.h> 
#endif 

to: 

#   if !defined(__APPLE__) && !defined(__OpenBSD__) && !defined(__ANDROID__) 
#     include <sys/statvfs.h> 
#     define BOOST_STATVFS statvfs 
#     define BOOST_STATVFS_F_FRSIZE vfs.f_frsize 
#   else 
#ifdef __OpenBSD__ 
#     include <sys/param.h> 
#elif defined(__ANDROID__) 
#     include <sys/vfs.h> 
#endif 

ii) modifiy the file $(SmartBodyDir)/android/boost/userconfig.jam, look for :

ANDROID_NDK = ../android-ndk ; and change the directory "../android-ndk" so it points to the android NDK directory

You may also need to change all arm-linux-androideabi-xxx to the corresponding toolchain name based on your target architecture and platform.

iii) (use cygwin in Windows platform )
./bootstrap.sh
./bjam --without-python --without-math --without-mpi --without- 
iostreams toolset=gcc-android4.4.3 link=static runtime-link=static 
target-os=linux --stagedir=android stage 

2. Building iconv and xerces
(To-Do)
3. Building clapack
(To-Do)







