// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "VisemeViewerWindow.h"
#include <FL/Fl.H>
#include <FL/fl_device.H>
#include <FL/fl_draw.H>
#include <stdlib.h>

VisemeViewerWindow::VisemeViewerWindow(int x, int y, int w, int h, char* name) : Fl_Double_Window(x, y, w, h)
{
	_phonemesSelected[0] = false;
	_phonemesSelected[1] = false;
	
	this->begin();

	_sliderCurveAnimation = new Fl_Value_Slider(115, 460, 435, 30);
	_sliderCurveAnimation->type(5);
	_sliderCurveAnimation->textsize(14);
	_buttonPlay = new Fl_Button(40, 455, 65, 40, "@>");

	_choiceCharacter = new Fl_Choice(70, 35, 100, 25, "Character");
	_choiceCharacter->callback(OnCharacterSelectCB, this);

	_browserPhoneme[0] = new Fl_Hold_Browser(10, 80, 70, 350, "Phoneme 1");
	_browserPhoneme[0]->align(FL_ALIGN_TOP);
	_browserPhoneme[0]->callback(OnPhoneme1SelectCB, this);

	_browserPhoneme[1] = new  Fl_Hold_Browser(85, 80, 70, 350, "Phoneme 2");
	_browserPhoneme[1]->align(FL_ALIGN_TOP);
	_browserPhoneme[1]->callback(OnPhoneme2SelectCB, this);
	
	Fl_Menu_Bar* menuBar = new Fl_Menu_Bar(0, 0, w, 30);
	menuBar->menu(menu_);
	menuBar->callback(OnMenuSelectCB, this);

	_curveEditor = new VisemeCurveEditor(165, 85, 390, 350, "Animation Curve");
	_curveEditor->color(FL_GRAY0, FL_GRAY0);

	_browserViseme = new Fl_Multi_Browser(575, 80, 70, 350, "Visemes");
	_browserViseme->align(FL_ALIGN_TOP);
	_browserViseme->callback(OnVisemeSelectCB, this);

	this->end();
	
	loadData();
}

VisemeViewerWindow::~VisemeViewerWindow()
{

}

Fl_Menu_Item VisemeViewerWindow::menu_[] = {
	{"File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
	{"Save", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
	{"Load", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
	{0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0}
};

void VisemeViewerWindow::draw()
{
	_curveEditor->redraw();

	Fl_Double_Window::draw();
}

bool  VisemeViewerWindow::loadData()
{
	for (int x = 0; x < 2; x++)
	{
		_browserPhoneme[x]->add("ao");
		_browserPhoneme[x]->add("d");
		_browserPhoneme[x]->add("ee");
		_browserPhoneme[x]->add("er");
		_browserPhoneme[x]->add("f");
		_browserPhoneme[x]->add("j");
		_browserPhoneme[x]->add("kg");
		_browserPhoneme[x]->add("ih");
		_browserPhoneme[x]->add("ng");
		_browserPhoneme[x]->add("oh");
		_browserPhoneme[x]->add("oo");
		_browserPhoneme[x]->add("r");
		_browserPhoneme[x]->add("th");
		_browserPhoneme[x]->add("z");
		_browserPhoneme[x]->add("bmp");
	}

	_browserViseme->add("FV");
	_browserViseme->add("open");
	_browserViseme->add("PBM");
	_browserViseme->add("ShCh");
	_browserViseme->add("tBack");
	_browserViseme->add("tRoof");
	_browserViseme->add("tTeeth");
	_browserViseme->add("wide");

	_choiceCharacter->add("Utah");
	_choiceCharacter->add("doctor");
	_choiceCharacter->add("elder");
	_choiceCharacter->add("brad");

	generateVisemes();
	
	return true;
}

void VisemeViewerWindow::generateVisemes()
{
	_curveEditor->generateCurves(_browserViseme->size());
}

void VisemeViewerWindow::updateViseme()
{
	for(int i = 1; i <= _browserViseme->size(); i++)
	{
		if(_browserViseme->selected(i)> 0)
			_curveEditor->setVisibility(i - 1, true);
		else
			_curveEditor->setVisibility(i - 1, false);
	}
}

void VisemeViewerWindow::OnPhoneme1SelectCB(Fl_Widget* widget, void* data)
{
	VisemeViewerWindow* viewer = (VisemeViewerWindow*) data;
	
	if(viewer->_browserPhoneme[0]->value() > 0)
		viewer->_phonemesSelected[0] = true;
	else 
	{
		viewer->_phonemesSelected[0] = false;
	}

	if(viewer->_phonemesSelected[0] && viewer->_phonemesSelected[1]){
		int lineSelected1 = viewer->_browserPhoneme[0]->value();
		int lineSelected2 = viewer->_browserPhoneme[1]->value();
		viewer->selectViseme(viewer->_browserPhoneme[0]->text(lineSelected1), viewer->_browserPhoneme[1]->text(lineSelected2));
	}

	viewer->updateViseme();
	viewer->draw();
}

void VisemeViewerWindow::OnPhoneme2SelectCB(Fl_Widget* widget, void* data)
{
	VisemeViewerWindow* viewer = (VisemeViewerWindow*) data;
	
	if(viewer->_browserPhoneme[1]->value() > 0)
		viewer->_phonemesSelected[1] = true;
	else 
		viewer->_phonemesSelected[1] = false;

	if(viewer->_phonemesSelected[0] && viewer->_phonemesSelected[1]){
		int lineSelected1 = viewer->_browserPhoneme[0]->value();
		int lineSelected2 = viewer->_browserPhoneme[1]->value();
		viewer->selectViseme(viewer->_browserPhoneme[0]->text(lineSelected1), viewer->_browserPhoneme[1]->text(lineSelected2));
	}

	viewer->updateViseme();
	viewer->draw();
}


void VisemeViewerWindow::OnVisemeSelectCB(Fl_Widget* widget, void* data)
{
	VisemeViewerWindow* viewer = (VisemeViewerWindow*) data;
	int viseme = viewer->_browserViseme->value();
	viewer->selectPhonemes(viewer->_browserViseme->text(viseme));

	viewer->_curveEditor->setVisibility(viseme - 1, true);
	viewer->_curveEditor->selectLine(viseme - 1);

	viewer->updateViseme();
	viewer->draw();
}

void VisemeViewerWindow::selectViseme(const char * phoneme1, const char * phoneme2)
{
	int viseme = rand() % _browserViseme->size() + 1;

	_browserViseme->select(viseme);

	_curveEditor->setVisibility(viseme - 1, true);
	_curveEditor->selectLine(viseme - 1);

}

void VisemeViewerWindow::selectPhonemes(const char * viseme)
{
	int phoneme1 = rand() % _browserPhoneme[0]->size() + 1;
	int phoneme2 = rand() % _browserPhoneme[1]->size() + 1;

	_browserPhoneme[0]->select(phoneme1);
	_browserPhoneme[1]->select(phoneme2);
}


void VisemeViewerWindow::OnSliderSelectCB(Fl_Widget* widget, void* data)
{
	VisemeViewerWindow* viewer = (VisemeViewerWindow*) data;
}

void VisemeViewerWindow::OnCharacterSelectCB(Fl_Widget* widget, void* data)
{
	VisemeViewerWindow* viewer = (VisemeViewerWindow*) data;
}

void VisemeViewerWindow::OnMenuSelectCB(Fl_Widget* widget, void* data)
{
	VisemeViewerWindow* viewer = (VisemeViewerWindow*) data;
}
