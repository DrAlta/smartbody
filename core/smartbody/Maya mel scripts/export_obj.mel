//  export_obj.mel - part of SmartBody Project
//  Copyright (C) 2005-2008  University of Southern California
//
//  SmartBody is free software: you can redistribute it and/or
//  modify it under the terms of the Lesser GNU General Public License
//  as published by the Free Software Foundation, version 3 of the
//  license.
//
//  SmartBody is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  Lesser GNU General Public License for more details.
//
//  You should have received a copy of the Lesser GNU General Public
//  License along with SmartBody.  If not, see:
//      http://www.gnu.org/licenses/lgpl-3.0.txt
//
//  CONTRIBUTORS:
//      Marcelo Kallmann, USC (currently at UC Merced)
//      Andrew n marshall, USC



////////////////////////////////////////////////////////////////
//  Exports set of .obj models for rigid-body viewer
//  Requires SkViewer to bind the .objs to the .sk skeleton
//

proc objExport ( string $path, string $name )
 {
   string $fname = $path + $name + ".obj";
   select -r $name;
   print ( "Exporting mesh " + $fname + "\n" );
   file -op "groups=1;ptgroups=1;materials=1;smoothing=1;normals=1;" -typ "OBJexport" -pr -es $fname;
 }
 
proc int objWriteObj ( string $jname, int $depth, string $path )
 {
   //=== Get Children ===
   string $children[];
   $children = `listRelatives $jname`;
   int $nchildren = `size $children`;

   //=== Check Type ===
   string $type = nodeType ( $jname );

   if ( $type=="mesh" )
    { objExport ( $path, $jname );
    }

   //=== Recurse ===
   for ( $i=0; $i<$nchildren; $i++ )
    { objWriteObj ( $children[$i], $depth+1, $path );
    }

   return 1;
 }
   
global proc int objWriteObjToFile ( string $fname )
 { 
//   string $path = dirname( $fname ) + "/";
   string $path = $fname + "/";

   $selectionList = `ls -sl`;
   if ( size($selectionList)<=0 )
    { error "Nothing selected!\n";
    }

   int $selectionListSize = `size $selectionList`;
   int $depth=0;

   for ( $j=0; $j<$selectionListSize; $j++ )
    {
      objWriteObj ( $selectionList[$j], $depth, $path );
    }

   select -r $selectionList[0];
   for ( $j=1; $j<$selectionListSize; $j++ )
    {
      select -r $selectionList[$j];
    }

   print ("Export done.\n");
   return 1;
}

global proc int objDirCb( string $filename, string $fileType )
{
  textFieldGrp -e -text $filename objOutputDir;
  return 1;
}

global proc objExportWin()
{
  global string $version = "0.1";

  if ( (`window -exists objMainWin`)==true ) deleteUI objMainWin;
  string $winTitle = "OBJ Exporter v"+$version+" - kallmann@ict.usc.edu";
  window -title $winTitle -wh 400 180 objMainWin;
  columnLayout -adjustableColumn true;
  textFieldGrp -label "Skeleton Root Joint:" -text "base" objRootField;
  textFieldGrp -label "Output Directory:" -text "C:/kallmann/tmp" objOutputDir;
  button -l "Browse Output File" -command "fileBrowserDialog -m 4 -fc \"objDirCb\" -an \"Select\" -om \"SaveAs\"";
  button -l "Export Geometries" -command "objExportGeometries";
  setParent..;
  showWindow objMainWin;
}

global proc objExportGeometries ()
{
  global string $version;
  string $root = `textFieldGrp -q -text objRootField`;
  select -r $root;
  string $dir = `textFieldGrp -q -text objOutputDir`;
  currentUnit -linear "cm";
  objWriteObjToFile ( $dir );
}

objExportWin;

//
// Obj Exporter version 0.1
// - each model is exported in global coordinates (and not local to the parent joint)
//
