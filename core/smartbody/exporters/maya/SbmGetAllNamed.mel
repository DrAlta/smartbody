/*
PndGetAllNamed.mel

This script will take the specified name and create an array of all objects in the scene that havr that name:

For example...
Given something an input of "base" it could potnentially return:
	-base
	-SkinRig:base
	-group1|base
Basically it will look for anything in the scene that has the specified naem as its "base name".
	
*/

global proc string[] SbmGetAllNamed (string $Name) {
	print ("Running: global proc: SbmGetAllNamed ($Name=" + $Name + " ) \n") ;
	
	//Variables
	string $LstFinal[] ;
	string $LstAllContaining[] ;
	string $Tokens[] ;
	string $NameOrig[] ;
	
	//Get all object which have $Name as part of their name (this ugly/brittle, I know -Matt)
	select -cl ;
	if (`objExists ("*" + $Name)`) {
		select -add ("*" + $Name) ;
	}
	if (`objExists ("*:*" + $Name)`) {
		select -add ("*:*" + $Name) ;
	}
	if (`objExists ("*:*:*" + $Name)`) {
		select -add ("*:*:*" + $Name) ;
	}
	if (`objExists ("*:*:*:*" + $Name)`) {
		select -add ("*:*:*:*" + $Name) ;
	}
	if (`objExists ("*:*:*:*:*" + $Name)`) {
		select -add ("*:*:*:*:*" + $Name) ;
	}
	$LstAllContaining = `ls -sl` ;
	
	//Get simple name of object (no namespace or hierarchy) and check that this matches with $Name exactly
	for ($Obj in $LstAllContaining) {
		$NameOrig[0] = $Obj ;
			//print  ($Obj + "\n") ;
	
		//get name of object without namespace
		tokenize $Obj ":" $Tokens ;
		size $Tokens ;
		$Obj = ( $Tokens[(`size $Tokens` -1)] ) ;
			//print  ($Obj + "\n") ;
			
		//get name of object without hierarchy (shortname)
		tokenize $Obj "|" $Tokens ;
		size $Tokens ;
		$Obj = ( $Tokens[(`size $Tokens` -1)] ) ;
			//print  ($Obj + "\n") ;
		
		
		//discard $Obj if it basename is not an exact match to $Name
		if ($Obj == $Name) {
			$LstFinal = `stringArrayCatenate $LstFinal $NameOrig` ;
		}
	}
	
	//Return namespace
	return $LstFinal ;	
}